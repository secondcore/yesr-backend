Ext.define("Ext.data.TreeStore",{extend:"Ext.data.AbstractStore",alias:"store.tree",requires:["Ext.util.Sorter","Ext.data.Tree","Ext.data.NodeInterface"],clearOnLoad:true,clearRemovedOnLoad:true,nodeParam:"node",defaultRootId:"root",defaultRootProperty:"children",folderSort:false,constructor:function(c){var d=this,b,a;c=Ext.apply({},c);a=c.fields||d.fields;if(!a){c.fields=[{name:"text",type:"string"}]}d.callParent([c]);d.tree=new Ext.data.Tree();d.relayEvents(d.tree,["append","remove","move","insert","beforeappend","beforeremove","beforemove","beforeinsert","expand","collapse","beforeexpand","beforecollapse","sort","rootchange"]);d.tree.on({scope:d,remove:d.onNodeRemove,beforeexpand:d.onBeforeNodeExpand,beforecollapse:d.onBeforeNodeCollapse,append:d.onNodeAdded,insert:d.onNodeAdded,sort:d.onNodeSort});d.onBeforeSort();b=d.root;if(b){delete d.root;d.setRootNode(b)}if(Ext.isDefined(d.nodeParameter)){if(Ext.isDefined(Ext.global.console)){Ext.global.console.warn("Ext.data.TreeStore: nodeParameter has been deprecated. Please use nodeParam instead.")}d.nodeParam=d.nodeParameter;delete d.nodeParameter}},setProxy:function(c){var a,b;if(c instanceof Ext.data.proxy.Proxy){b=Ext.isEmpty(c.getReader().root)}else{if(Ext.isString(c)){b=true}else{a=c.reader;b=!(a&&!Ext.isEmpty(a.root))}}c=this.callParent(arguments);if(b){a=c.getReader();a.root=this.defaultRootProperty;a.buildExtractors(true)}},onBeforeSort:function(){if(this.folderSort){this.sort({property:"leaf",direction:"ASC"},"prepend",false)}},onBeforeNodeExpand:function(b,c,a){if(b.isLoaded()){Ext.callback(c,a||b,[b.childNodes])}else{if(b.isLoading()){this.on("load",function(){Ext.callback(c,a||b,[b.childNodes])},this,{single:true})}else{this.read({node:b,callback:function(){Ext.callback(c,a||b,[b.childNodes])}})}}},getNewRecords:function(){return Ext.Array.filter(this.tree.flatten(),this.filterNew)},getUpdatedRecords:function(){return Ext.Array.filter(this.tree.flatten(),this.filterUpdated)},onBeforeNodeCollapse:function(b,c,a){c.call(a||b,b.childNodes)},onNodeRemove:function(b,d,a){var c=this,e=c.removed;if(!d.isReplace&&Ext.Array.indexOf(e,d)==-1){e.push(d)}if(c.autoSync&&!c.autoSyncSuspended&&!a){c.sync()}},onNodeAdded:function(c,e){var d=this,b=d.getProxy(),a=b.getReader(),f=e.raw||e[e.persistenceProperty],g;Ext.Array.remove(d.removed,e);if(!e.isLeaf()){g=a.getRoot(f);if(g){d.fillNode(e,a.extractData(g));delete f[a.root]}}if(d.autoSync&&!d.autoSyncSuspended&&(e.phantom||e.dirty)){d.sync()}},onNodeSort:function(){if(this.autoSync&&!this.autoSyncSuspended){this.sync()}},setRootNode:function(a,c){var b=this;a=a||{};if(!a.isModel){Ext.applyIf(a,{id:b.defaultRootId,text:"Root",allowDrag:false});Ext.data.NodeInterface.decorate(b.model);a=Ext.ModelManager.create(a,b.model)}else{if(a.isModel&&!a.isNode){Ext.data.NodeInterface.decorate(b.model)}}b.getProxy().getReader().buildExtractors(true);b.tree.setRootNode(a);if(c!==true&&!a.isLoaded()&&(b.autoLoad===true||a.isExpanded())){b.load({node:a})}return a},getRootNode:function(){return this.tree.getRootNode()},getNodeById:function(a){return this.tree.getNodeById(a)},load:function(b){b=b||{};b.params=b.params||{};var d=this,c=b.node||d.tree.getRootNode(),a;if(!c){c=d.setRootNode({expanded:true},true)}if(d.clearOnLoad){if(d.clearRemovedOnLoad){d.clearRemoved(c)}d.tree.un("remove",d.onNodeRemove,d);c.removeAll(false);d.tree.on("remove",d.onNodeRemove,d)}Ext.applyIf(b,{node:c});b.params[d.nodeParam]=c?c.getId():"root";if(c){c.set("loading",true)}return d.callParent([b])},clearRemoved:function(b){var j=this,e=j.removed,a=b.getId(),d=e.length,c=d,m={},g=[],l={},h,f,k;if(b===j.getRootNode()){j.removed=[];return}for(;c--;){h=e[c];l[h.getId()]=h}for(c=d;c--;){h=e[c];f=h;while(f&&f.getId()!==a){k=f.get("parentId");f=f.parentNode||j.getNodeById(k)||l[k]}if(f){m[h.getId()]=h}}for(c=0;c<d;c++){h=e[c];if(!m[h.getId()]){g.push(h)}}j.removed=g},fillNode:function(b,c){var g=this,e=c?c.length:0,f=g.sorters,d,j,h=false,a=e&&g.sortOnLoad&&!g.remoteSort&&f&&f.items&&f.items.length,l,k;for(d=1;d<e;d++){l=c[d];k=c[d-1];h=l[l.persistenceProperty].index!=k[k.persistenceProperty].index;if(h){break}}if(a){if(h){g.sorters.insert(0,g.indexSorter)}j=new Ext.util.MixedCollection();j.addAll(c);j.sort(g.sorters.items);c=j.items;g.sorters.remove(g.indexSorter)}else{if(h){Ext.Array.sort(c,g.sortByIndex)}}b.set("loaded",true);for(d=0;d<e;d++){b.appendChild(c[d],undefined,true)}return c},sortByIndex:function(b,a){return b[b.persistenceProperty].index-a[a.persistenceProperty].index},onProxyLoad:function(c){var h=this,e=c.wasSuccessful(),b=c.getRecords(),a=c.node,g,j,f,d;h.loading=false;a.set("loading",false);if(e){if(!h.clearOnLoad){b=h.cleanRecords(a,b)}b=h.fillNode(a,b)}h.fireEvent("read",h,c.node,b,e);h.fireEvent("load",h,c.node,b,e);Ext.callback(c.callback,c.scope||h,[b,c,e])},cleanRecords:function(f,b){var e={},h=f.childNodes,d=0,a=h.length,c=[],g;for(;d<a;++d){e[h[d].getId()]=true}for(d=0,a=b.length;d<a;++d){g=b[d];if(!e[g.getId()]){c.push(g)}}return c},removeAll:function(){var a=this.getRootNode();if(a){a.destroy(true)}this.fireEvent("clear",this)},doSort:function(a){var b=this;if(b.remoteSort){b.load()}else{b.tree.sort(a,true);b.fireEvent("datachanged",b);b.fireEvent("refresh",b)}b.fireEvent("sort",b)}},function(){var a=this.prototype;a.indexSorter=new Ext.util.Sorter({sorterFn:a.sortByIndex})});