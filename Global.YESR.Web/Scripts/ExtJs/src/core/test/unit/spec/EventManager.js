describe("Ext.EventManager",function(){var b,c,a;beforeEach(function(){addGlobal("id");addGlobal("ExtBox1");b=document.body;c=document.createElement("DIV");c.id="element-with-id";b.appendChild(c);a=document.createElement("DIV");b.appendChild(a)});afterEach(function(){var d=Ext.get(c);if(d){d.remove()}d=Ext.get(a);if(d){d.remove()}});describe("event binding",function(){describe("getId",function(){describe("if element has an id",function(){it("should return element id",function(){expect(c.id).toBe(Ext.EventManager.getId(c))})});describe("if element hasn't an id",function(){var e,d;beforeEach(function(){e="nf-42";spyOn(Ext,"id").andCallFake(function(f){return(f.id=e)});d=Ext.EventManager.getId(a)});it("should add an id to element with Ext.id",function(){expect(a.id).toBe(e)});it("should return the element id",function(){expect(d).toBe(e)})});describe("document and window",function(){describe("document",function(){var d;beforeEach(function(){d=Ext.EventManager.getId(document)});it("should enable skipGarbageCollection flag",function(){expect(Ext.cache[Ext.documentId].skipGarbageCollection).toBe(true)});it("should return Ext.documentId",function(){expect(d).toBe(Ext.documentId)})});describe("window",function(){var d;beforeEach(function(){d=Ext.EventManager.getId(window)});it("should enable skipGarbageCollection flag",function(){expect(Ext.cache[Ext.windowId].skipGarbageCollection).toBe(true)});it("should return Ext.windowId",function(){expect(d).toBe(Ext.windowId)})})})});describe("prepareListenerConfig",function(){var e,d;beforeEach(function(){e={click:Ext.emptyFn,scope:fakeScope};d={click:{fn:Ext.emptyFn,scope:fakeScope}};spyOn(Ext.EventManager,"removeListener");spyOn(Ext.EventManager,"addListener")});describe("if remove",function(){describe("with an object like click: function(){}, scope: this",function(){it("should call removeListener",function(){Ext.EventManager.prepareListenerConfig(b,e,true);expect(Ext.EventManager.removeListener).toHaveBeenCalledWith(b,"click",Ext.emptyFn,fakeScope,e)})});describe("with an object like click: {fn: function(){}, scope: this}",function(){it("should call removeListener",function(){Ext.EventManager.prepareListenerConfig(b,d,true);expect(Ext.EventManager.removeListener).toHaveBeenCalledWith(b,"click",Ext.emptyFn,fakeScope,d.click)})})});describe("if add",function(){describe("with an object like click: function(){}, scope: this",function(){it("should call addListener",function(){Ext.EventManager.prepareListenerConfig(b,e);expect(Ext.EventManager.addListener).toHaveBeenCalledWith(b,"click",Ext.emptyFn,fakeScope,e)})});describe("with an object like click: {fn: function(){}, scope: this}",function(){it("should call addListener",function(){Ext.EventManager.prepareListenerConfig(b,d);expect(Ext.EventManager.addListener).toHaveBeenCalledWith(b,"click",Ext.emptyFn,fakeScope,d.click)})})})});describe("addListener",function(){describe("if eventName is an object",function(){var d;beforeEach(function(){d={}});it("should call prepareListenerConfig",function(){spyOn(Ext.EventManager,"prepareListenerConfig");Ext.EventManager.addListener(b,d);expect(Ext.EventManager.prepareListenerConfig).toHaveBeenCalledWith(b,d)})});describe("event firing",function(){var d;beforeEach(function(){d={click:{fn:jasmine.createSpy(),scope:fakeScope}};Ext.EventManager.addListener(b,d)});afterEach(function(){Ext.EventManager.removeListener(b,d)});it("should call the listener",function(){jasmine.fireMouseEvent(b,"click",1,1);expect(d.click.fn).toHaveBeenCalled()})});describe("options",function(){var d;afterEach(function(){Ext.EventManager.removeListener(b,d)});describe("scope",function(){it("should call the listener with the correct scope",function(){d={click:{fn:jasmine.createSpy(),scope:fakeScope}};Ext.EventManager.addListener(b,d);jasmine.fireMouseEvent(b,"click",1,1);expect(d.click.fn.calls[0].object).toBe(fakeScope)})});describe("delegate",function(){var e;beforeEach(function(){d={click:{fn:jasmine.createSpy(),delegate:".something",scope:fakeScope}};e=Ext.get(b).createChild({cls:"child"}).dom});afterEach(function(){var f=Ext.get(e);if(f){f.remove()}});describe("if filter found nothing",function(){it("should not call the listener",function(){Ext.EventManager.addListener(b,d);jasmine.fireMouseEvent(e,"click",1,1);expect(d.click.fn).not.toHaveBeenCalled()})});describe("if filter found something",function(){it("should call the listener",function(){Ext.get(e).addCls("something");Ext.EventManager.addListener(b,d);jasmine.fireMouseEvent(e,"click",1,1);expect(d.click.fn).toHaveBeenCalled()})});describe("stopevent",function(){var f;beforeEach(function(){d={click:{fn:jasmine.createSpy(),stopEvent:true,scope:fakeScope}};f=Ext.get(b).createChild({tag:"input",type:"checkbox"}).dom;Ext.EventManager.addListener(b,d);Ext.EventManager.addListener(f,d);if(jasmine.browser.isIE){f.click()}else{jasmine.fireMouseEvent(f,"click",1,1)}});afterEach(function(){var g=Ext.get(f);if(g){g.remove()}Ext.EventManager.removeListener(f,d)});it("should stop propagation to parent elements",function(){expect(d.click.fn.calls.length).toEqual(1)});it("should prevent default browser handling of the event",function(){expect(f.checked).toBe(false)})});describe("preventDefault",function(){var f;beforeEach(function(){d={click:{fn:jasmine.createSpy(),preventDefault:true,scope:fakeScope}};f=Ext.get(b).createChild({tag:"input",type:"checkbox"}).dom;Ext.EventManager.addListener(b,d);Ext.EventManager.addListener(f,d);if(jasmine.browser.isIE){f.click()}else{jasmine.fireMouseEvent(f,"click",1,1)}});afterEach(function(){var g=Ext.get(f);if(g){g.remove()}Ext.EventManager.removeListener(f,d)});it("should prevent default browser handling of the event",function(){expect(f.checked).toBe(false)});it("should not stop the propagation of the event",function(){expect(d.click.fn.calls.length).toEqual(2)})});describe("stopPropagation",function(){var f;beforeEach(function(){d={click:{fn:jasmine.createSpy(),stopPropagation:true,scope:fakeScope}};f=Ext.getBody().createChild({tag:"input",type:"checkbox"}).dom;Ext.EventManager.addListener(b,d);Ext.EventManager.addListener(f,d);if(jasmine.browser.isIE){f.click()}else{jasmine.fireMouseEvent(f,"click",1,1)}});afterEach(function(){var g=Ext.get(f);if(g){g.remove()}Ext.EventManager.removeListener(f,d)});it("should stop propagation to parent elements",function(){expect(d.click.fn.calls.length).toEqual(1)});it("should not prevent default browser handling of the event",function(){expect(f.checked).toBe(true)})});describe("normalized",function(){var f;beforeEach(function(){d={click:{fn:jasmine.createSpy(),normalized:false,scope:fakeScope}};Ext.EventManager.addListener(b,d);f=jasmine.fireMouseEvent(b,"click",1,1)});it("should pass a browser event instead of an Ext.EventObject",function(){expect(d.click.fn).toHaveBeenCalledWith(f,b,d.click)})});describe("delay",function(){beforeEach(function(){d={click:{fn:jasmine.createSpy(),delay:1,scope:fakeScope}};Ext.EventManager.addListener(b,d)});it("should not call listener before 1 ms",function(){jasmine.fireMouseEvent(b,"click",1,1);expect(d.click.fn).not.toHaveBeenCalled()});it("should call listener after 1 ms",function(){runs(function(){jasmine.fireMouseEvent(b,"click",1,1)});waits(1);runs(function(){expect(d.click.fn).toHaveBeenCalled()})})});describe("single",function(){beforeEach(function(){d={click:{fn:jasmine.createSpy(),single:true,scope:fakeScope}};Ext.EventManager.addListener(b,d);jasmine.fireMouseEvent(b,"click",1,1);jasmine.fireMouseEvent(b,"click",1,1)});it("should call listener only one time",function(){expect(d.click.fn.calls.length).toEqual(1)})});describe("buffer",function(){beforeEach(function(){d={click:{fn:jasmine.createSpy(),buffer:1,scope:fakeScope}};Ext.EventManager.addListener(b,d);jasmine.fireMouseEvent(b,"click",1,1);jasmine.fireMouseEvent(b,"click",1,1)});it("should call listener only one time",function(){waits(1);runs(function(){expect(d.click.fn.calls.length).toEqual(1)})})});describe("target",function(){var f;beforeEach(function(){f=Ext.get(b).createChild({}).dom;d={click:{fn:jasmine.createSpy(),target:b,scope:fakeScope}};Ext.EventManager.addListener(b,d)});afterEach(function(){var g=Ext.get(f);if(g){g.remove()}});it("should call listener if element event is fired",function(){jasmine.fireMouseEvent(b,"click",1,1);expect(d.click.fn).toHaveBeenCalled()});it("should not call listener if child event is fired (no bubbling)",function(){jasmine.fireMouseEvent(f,"click",1,1);expect(d.click.fn).not.toHaveBeenCalled()})})})})});describe("removeListener",function(){describe("if eventName is an object",function(){it("should call prepareListenerConfig",function(){var d={};spyOn(Ext.EventManager,"prepareListenerConfig");Ext.EventManager.removeListener(b,d);expect(Ext.EventManager.prepareListenerConfig).toHaveBeenCalledWith(b,d,true)})});describe("event firing",function(){var d;beforeEach(function(){d={click:{fn:jasmine.createSpy(),scope:fakeScope}};Ext.EventManager.addListener(b,d);Ext.EventManager.removeListener(b,d)});it("should not call the listener",function(){jasmine.fireMouseEvent(b,"click",1,1);expect(d.click.fn).not.toHaveBeenCalled()})})});describe("removeAll",function(){var d;beforeEach(function(){d={click:{fn:jasmine.createSpy(),scope:fakeScope},mouseover:{fn:jasmine.createSpy(),scope:fakeScope}};Ext.EventManager.addListener(b,d);Ext.EventManager.removeAll(b,d)});it("should should not call click listener",function(){jasmine.fireMouseEvent(b,"click",1,1);expect(d.click.fn).not.toHaveBeenCalled()});it("should not call mouseover listener",function(){jasmine.fireMouseEvent(b,"mouseover",1,1);expect(d.mouseover.fn).not.toHaveBeenCalled()})});describe("purgeElement",function(){var e,d;beforeEach(function(){e=Ext.get(b).createChild({cls:"child"}).dom;d={mouseover:{fn:jasmine.createSpy(),scope:fakeScope}};Ext.EventManager.addListener(b,d);Ext.EventManager.addListener(e,d);Ext.EventManager.purgeElement(b)});afterEach(function(){var f=Ext.get(e);if(f){f.remove()}});it("should remove all listeners from element",function(){jasmine.fireMouseEvent(b,"mouseover",1,1);expect(d.mouseover.fn).not.toHaveBeenCalled()});it("should remove all listeners from element children",function(){jasmine.fireMouseEvent(e,"mouseover",1,1);expect(d.mouseover.fn).not.toHaveBeenCalled()})});describe("methods alias",function(){it("should alias addListener with on",function(){expect(Ext.EventManager.on).toBe(Ext.EventManager.addListener)});it("should alias removeListener with un",function(){expect(Ext.EventManager.un).toBe(Ext.EventManager.removeListener)})})})});