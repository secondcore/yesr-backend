describe("Ext.dom.Element",function(){var b,c;afterEach(function(){if(c){c.remove()}if(b&&b.parentNode===document.body){document.body.removeChild(b)}});describe("instantiation",function(){beforeEach(function(){b=document.createElement("div");Ext.getBody().appendChild(b)});it("should set dom element id if it hasn't already one",function(){c=new Ext.dom.Element(b);expect(b.id).toBeDefined()});it("should not set dom element id if it has already one",function(){var d=Ext.id();b.id=d;c=new Ext.dom.Element(b);expect(b.id).toEqual(d)});it("should set dom property to dom element",function(){c=new Ext.dom.Element(b);expect(c.dom).toBe(b)});it("should set id property to dom id",function(){var d=Ext.id();b.id=d;c=new Ext.dom.Element(b);expect(c.id).toEqual(d)});it("should not set dom or id property if first argument is undefined",function(){c=new Ext.dom.Element();expect(c.id).toBeUndefined();expect(c.dom).toBeUndefined()});it("should find a dom element if a string corresponding to it's id is passed as first argument",function(){var d=Ext.id();b.id=d;c=new Ext.dom.Element(d);expect(c.dom).toBe(b)})});function a(){describe("set",function(){it("should call Ext.core.DomHelper.applyStyles if object passed as first argument has style property",function(){var d={width:"100px"};spyOn(Ext.core.DomHelper,"applyStyles");c.set({style:d});expect(Ext.core.DomHelper.applyStyles).toHaveBeenCalledWith(c.dom,d)});it("should set dom element className if object passed as first argument has cls property",function(){var d="x-test-class";c.set({cls:d});expect(c.dom.className).toEqual(d)});it("should use setAttribute by default",function(){spyOn(c.dom,"setAttribute");c.set({align:"center"});expect(c.dom.setAttribute).toHaveBeenCalledWith("align","center")});it("should be able to use expandos",function(){spyOn(c.dom,"setAttribute");c.set({align:"center"},false);expect(c.dom.align).toEqual("center")})});describe("is",function(){it("Returns true if this element matches the passed simple selector",function(){c.set({cls:"x-test-class"});expect(c.is("div.x-test-class")).toBe(true)})});describe("focus",function(){it("should focus dom element",function(){spyOn(c.dom,"focus");c.focus();expect(c.dom.focus).toHaveBeenCalled()});it("should be able to defer dom element focus",function(){spyOn(c.dom,"focus");c.focus(1);waitsFor(function(){return c.dom.focus.calls.length===1},"element.dom.focus was never called");runs(function(){expect(c.dom.focus).toHaveBeenCalled()})});it("should ignore any exception",function(){c.dom.focus=function(){throw"error"};expect(c.focus).not.toThrow("error")})});describe("blur",function(){it("should blur dom element",function(){spyOn(c.dom,"blur");c.blur();expect(c.dom.blur).toHaveBeenCalled()});it("should ignore any exception",function(){c.dom.blur=function(){throw"error"};expect(c.blur).not.toThrow("error")})});describe("getValue",function(){beforeEach(function(){c.dom.value="10"});it("should return the dom value",function(){expect(c.getValue()).toEqual("10")});it("should return the dom value as Number",function(){expect(c.getValue(true)).toEqual(10)})});describe("listeners",function(){var d;beforeEach(function(){d={delay:10}});describe("addListener",function(){it("should call Ext.EventManager.on",function(){spyOn(Ext.EventManager,"on");c.addListener("click",Ext.emptyFn,fakeScope,d);expect(Ext.EventManager.on).toHaveBeenCalledWith(c,"click",Ext.emptyFn,fakeScope,d)})});describe("removeListener",function(){it("should call Ext.EventManager.un",function(){spyOn(Ext.EventManager,"un");c.removeListener("click",Ext.emptyFn,fakeScope);expect(Ext.EventManager.un).toHaveBeenCalledWith(c,"click",Ext.emptyFn,fakeScope)})});describe("removeAllListener",function(){it("should call Ext.EventManager.removeAll",function(){spyOn(Ext.EventManager,"removeAll");c.removeAllListeners();expect(Ext.EventManager.removeAll).toHaveBeenCalledWith(c.dom)})});describe("purgeAllListener",function(){it("should call Ext.EventManager.purgeElement",function(){spyOn(Ext.EventManager,"purgeElement");c.purgeAllListeners();expect(Ext.EventManager.purgeElement).toHaveBeenCalledWith(c)})})});describe("addUnits",function(){it("should return an empty string if size passed is an empty string",function(){expect(c.addUnits("")).toEqual("")});it("should return auto if size passed is 'auto' string",function(){expect(c.addUnits("auto")).toEqual("auto")});it("should return an empty string if size passed is undefined",function(){expect(c.addUnits(undefined)).toEqual("")});it("should return an empty string if size passed is null",function(){expect(c.addUnits(null)).toEqual("")})});describe("remove",function(){beforeEach(function(){spyOn(Ext,"removeNode").andCallThrough();c.remove()});it("should remove dom property",function(){expect(c.dom).toBeUndefined()});it("should call Ext.removeNode",function(){expect(Ext.removeNode).toHaveBeenCalledWith(b)})});describe("hover",function(){var e,d,f;beforeEach(function(){e=function(){return 1};d=function(){return 2};f={foo:true};spyOn(c,"on")});describe("mouseenter event",function(){it("should add a listener on mouseenter",function(){c.hover(e,d,fakeScope,f);expect(c.on).toHaveBeenCalledWith("mouseenter",e,fakeScope,f)});it("should set scope to element.dom if it is not passed in arguments",function(){c.hover(e,d,null,f);expect(c.on).toHaveBeenCalledWith("mouseenter",e,c.dom,f)})});describe("mouseleave event",function(){it("should add a listener on mouseleave",function(){c.hover(e,d,fakeScope,f);expect(c.on).toHaveBeenCalledWith("mouseleave",d,fakeScope,f)});it("should set scope to element.dom if it is not passed in arguments",function(){c.hover(e,d,null,f);expect(c.on).toHaveBeenCalledWith("mouseleave",d,c.dom,f)})})});describe("contains",function(){});describe("getAttributeNs",function(){it("should call element getAttribute",function(){spyOn(c,"getAttribute");c.getAttributeNS("ns1","align");expect(c.getAttribute).toHaveBeenCalledWith("align","ns1")})});describe("getAttribute",function(){var e,d;beforeEach(function(){e=Ext.getBody().createChild({tag:"div"});if(c.dom.setAttribute){c.dom.setAttribute("qtip","bar");e.dom.setAttribute("ext:qtip","foo")}else{c.dom.qtip="bar";e.dom["ext:qtip"]="foo"}if(c.dom.setAttributeNS){d=Ext.getBody().createChild({tag:"div"});d.dom.setAttributeNS("ext","qtip","foobar")}});afterEach(function(){if(e){e.remove()}if(d){d.remove()}});describe("without namespace",function(){it("should return the attribute value if it exists",function(){expect(c.getAttribute("qtip")).toEqual("bar")});it("should return null if the attribute does not exist",function(){expect(c.getAttribute("nothing")).toBeNull()})});describe("with namespace",function(){it("should return null on a non-namespaced attribute",function(){expect(c.getAttribute("qtip","ext")).toBeNull()});it("should return null if the attribute belong to another namespace",function(){expect(e.getAttribute("qtip","nothing")).toBeNull()});it("should return the attribute value if it belongs to the namespace",function(){if(d){expect(d.getAttribute("qtip","ext")).toEqual("foobar")}});it("should handle xml namespace",function(){expect(e.getAttribute("qtip","ext")).toEqual("foo")})})});describe("update",function(){beforeEach(function(){c.dom.innerHTML="hello world"});it("should update dom element innerHTML",function(){c.update("foobar");expect(c.dom).hasHTML("foobar")});it("should return element",function(){expect(c.update("foobar")).toBe(c)})});describe("prototype aliases",function(){it("should aliases addListener with on",function(){expect(typeof(c.on)).toEqual("function")});it("should aliases removeListener with un",function(){expect(typeof(c.un)).toEqual("function")});it("should aliases removeAllListeners with clearListeners",function(){expect(typeof(c.clearListeners)).toEqual("function")})});describe("visibilityMode",function(){it("must be able to setVisibilityMode and getVisibilityMode",function(){c.setVisibilityMode(Ext.dom.Element.DISPLAY);expect(c.getVisibilityMode()).toBe(Ext.dom.Element.DISPLAY);c.setVisibilityMode(Ext.dom.Element.VISIBILITY);expect(c.getVisibilityMode()).toBe(Ext.dom.Element.VISIBILITY)});it("should retain visibilityMode on flyweights",function(){Ext.fly(c.dom).setVisibilityMode(Ext.dom.Element.DISPLAY);expect(Ext.fly(c.dom).getVisibilityMode()).toBe(Ext.dom.Element.DISPLAY)})});describe("visibility",function(){var f,d,e=[Ext.dom.Element.DISPLAY,Ext.dom.Element.VISIBILITY];beforeEach(function(){f=c.createChild({tag:"div"});if(f){f.setVisible(true);d=f.createChild({tag:"div"});if(d){d.setVisible(true)}}});afterEach(function(){if(d){d.remove()}if(f){f.remove()}});it("should toggle the visibility of the element itself",function(){for(var g in e){c.setVisibilityMode(e[g]);c.setVisible(false);expect(c.isVisible(false)).toBe(false);c.setVisible(true);expect(c.isVisible(false)).toBe(true)}});it("should toggle the 'deep' visibility of the grand-child",function(){for(var g in e){c.setVisibilityMode(e[g]);c.setVisible(false);expect(d.isVisible(true)).toBe(false);c.setVisible(true);expect(d.isVisible(true)).toBe(true)}})})}describe("methods",function(){beforeEach(function(){b=document.createElement("div");document.body.appendChild(b)});describe("new Ext.dom.Element",function(){beforeEach(function(){c=new Ext.dom.Element(b)});a()});describe("Ext.fly",function(){beforeEach(function(){c=Ext.fly(b)});a()})});describe("class methods",function(){var d,e,f;beforeEach(function(){c=Ext.getBody().createChild({tag:"div"});b=c.dom;f=Ext.id();e=document.createElement("div");e.id=f;document.body.appendChild(e);spyOn(Ext.dom.Element,"addToCache").andCallThrough()});afterEach(function(){if(d){d.remove()}if(e&&e.parentNode===document.body){document.body.removeChild(e)}});describe("get",function(){describe("alias",function(){it("should alias Ext.dom.Element.get with Ext.get",function(){spyOn(Ext.dom.Element,"get");Ext.get();expect(Ext.dom.Element.get).toHaveBeenCalled()})});describe("passing string id as first argument",function(){describe("with a dom element which is not already encapsulated",function(){it("should return a new Ext.dom.Element",function(){d=Ext.get(f);expect(d instanceof Ext.dom.Element).toBe(true)});it("should encapsulate the dom element in the Ext.dom.Element",function(){d=Ext.get(f);expect(d.dom).toBe(e)});it("should add element to Ext.cache",function(){d=Ext.get(f);expect(Ext.dom.Element.addToCache).toHaveBeenCalledWith(d)})});describe("with a dom element which is already encapsulated",function(){it("should return the corresponding Ext.Element",function(){expect(Ext.get(b)).toBe(c)});it("should not add element to Ext.cache if it is already in",function(){Ext.get(b);expect(Ext.dom.Element.addToCache).not.toHaveBeenCalled()})})});describe("passing dom element as first argument",function(){describe("with a dom element which is not already encapsulated",function(){it("should return a new Ext.dom.Element",function(){d=Ext.get(e);expect(d instanceof Ext.dom.Element).toBe(true)});it("should encapsulate the dom element in the Ext.dom.Element",function(){d=Ext.get(e);expect(d.dom).toBe(e)});it("should add element to Ext.cache",function(){d=Ext.get(e);expect(Ext.dom.Element.addToCache).toHaveBeenCalledWith(d)})});describe("with a dom element which is already encapsulated",function(){it("should return the corresponding Ext.Element",function(){expect(Ext.get(b.id)).toBe(c)});it("should not add element to Ext.cache if it is already in",function(){Ext.get(b.id);expect(Ext.dom.Element.addToCache).not.toHaveBeenCalled()})})});describe("passing an Ext.dom.Element as first argument",function(){it("should return Ext.dom.Element",function(){expect(Ext.get(c)).toBe(c)})});describe("passing a CompositeElement as first argument",function(){var g;beforeEach(function(){g=Ext.select("div")});it("should return Ext.dom.Element",function(){expect(Ext.get(g)).toBe(g)})});describe("passing an array as first argument",function(){it("should call Ext.dom.Element.select",function(){var g=[b,e];spyOn(Ext.dom.Element,"select");Ext.get(g);expect(Ext.dom.Element.select).toHaveBeenCalledWith(g)})});describe("passing document as first argument",function(){it("should return an Ext.dom.Element",function(){expect(Ext.get(document) instanceof Ext.dom.Element).toBe(true)});xit("should return a bogus Ext.dom.Element",function(){expect(Ext.get(document).id).not.toBeDefined()});it("should return an Ext.dom.Element that encapsulate document",function(){expect(Ext.get(document).dom).toBe(document)})})});xdescribe("garbageCollector",function(){});describe("fly",function(){var g;beforeEach(function(){spyOn(Ext,"getDom").andCallThrough()});describe("global flyweight",function(){beforeEach(function(){g=Ext.fly(e)});it("should return an Ext.dom.Element.Fly",function(){expect(g instanceof Ext.dom.AbstractElement.Fly).toBe(true)});it("should not cache a dom element",function(){expect(Ext.cache[e.id]).toBeUndefined()});it("should call Ext.getDom",function(){expect(Ext.getDom).toHaveBeenCalledWith(e)});it("should create a one time reference",function(){expect(Ext.dom.AbstractElement._flyweights._global).toEqual(g)})});describe("named reusable flyweight",function(){beforeEach(function(){g=Ext.fly(e,"myflyweight")});it("should return an Ext.dom.Element.Flyweight",function(){expect(g instanceof Ext.dom.AbstractElement.Fly).toBe(true)});it("should not cache a dom element",function(){expect(Ext.cache[e.id]).toBeUndefined()});it("should call Ext.getDom",function(){expect(Ext.getDom).toHaveBeenCalledWith(e)});it("should create a one time reference",function(){expect(Ext.dom.AbstractElement._flyweights.myflyweight).toEqual(g)})})});describe("aliases",function(){it("should aliases Ext.dom.Element.get with Ext.get",function(){spyOn(Ext.dom.Element,"get");Ext.get();expect(Ext.dom.Element.get).toHaveBeenCalled()});it("should aliases Ext.Element fly with Ext.fly",function(){spyOn(Ext.dom.AbstractElement,"fly");Ext.fly();expect(Ext.dom.AbstractElement.fly).toHaveBeenCalled()})})});describe("getXY",function(){var d;beforeEach(function(){d=document.createElement("div")});it("should not throw when reading unattached element",function(){Ext.fly(d).getXY()})})},"/src/dom/Element.js");