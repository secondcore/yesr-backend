describe("Ext-more",function(){beforeEach(function(){addGlobal("ExtBox1")});describe("Ext.id",function(){var a;describe("if element passed as first argument is different of document or window",function(){beforeEach(function(){a=document.createElement("div");document.body.appendChild(a)});afterEach(function(){Ext.getBody().dom.removeChild(a)});it("should generate an unique id for the element with default prefix ext-gen",function(){expect(Ext.id(a)).toEqual("ext-gen"+Ext.idSeed)});it("should generate an unique id for the element with custom prefix",function(){var b="nico-yhwh";expect(Ext.id(a,b)).toEqual(b+Ext.idSeed)});it("should not override existing id",function(){var b="unchanged";a.id=b;expect(Ext.id(a)).toEqual(b)})});describe("if element passed as first argument is document",function(){it("should return Ext.documentId",function(){expect(Ext.id(document)).toEqual(Ext.documentId)})});describe("if element passed as first argument is window",function(){it("should return Ext.windowId",function(){expect(Ext.id(window)).toEqual(Ext.windowId)})})});describe("Ext.getBody",function(){it("should return current document body as an Ext.Element",function(){expect(Ext.getBody()).toEqual(Ext.get(document.body))})});describe("Ext.getHead",function(){it("should return current document head as an Ext.Element",function(){expect(Ext.getHead()).toEqual(Ext.get(document.getElementsByTagName("head")[0]))})});describe("Ext.getDoc",function(){it("should return the current HTML document object as an Ext.element",function(){expect(Ext.getDoc()).toEqual(Ext.get(document))})});if(Ext.Component){describe("Ext.getCmp",function(){it("should return a component",function(){var a=new Ext.Component({id:"foobar"});expect(Ext.getCmp("foobar")).toBe(a);a.destroy()})})}if(!Ext.isWindows&&!Ext.isMac&&!Ext.isLinux){describe("Ext.getOrientation",function(){it("should return the current orientation of the mobile device",function(){if(window.innerHeight<=window.innerWidth){expect(Ext.getOrientation()).toEqual("landscape")}else{expect(Ext.getOrientation()).toEqual("portrait")}})})}describe("Ext.callback",function(){var a;beforeEach(function(){a=jasmine.createSpy()});afterEach(function(){a=undefined});it("should execute the passed function in the specified scope",function(){Ext.callback(a,fakeScope);expect(a.calls[0].object).toBe(fakeScope)});it("should pass arguments to the callback function",function(){Ext.callback(a,fakeScope,[1,2,3,4,6]);expect(a).toHaveBeenCalledWith(1,2,3,4,6)});it("should be able to defer function call",function(){runs(function(){Ext.callback(a,fakeScope,[1,2,3,4,6],1);expect(a).not.toHaveBeenCalled()});waits(1);runs(function(){expect(a).toHaveBeenCalledWith(1,2,3,4,6);expect(a.calls[0].object).toBe(fakeScope)})})});describe("Ext.destroy",function(){var c,b,a;beforeEach(function(){c=jasmine.createSpyObj("o1",["destroy"]);b=jasmine.createSpyObj("o2",["destroy"]);a=jasmine.createSpyObj("o3",["dest"])});it("should destroy an object",function(){Ext.destroy(c);expect(c.destroy).toHaveBeenCalled()});it("should not destroy an object without a destroy method",function(){Ext.destroy(a);expect(a.dest).not.toHaveBeenCalled()});it("should destroy an array of objects",function(){Ext.destroy([c,b,a]);expect(c.destroy).toHaveBeenCalled();expect(b.destroy).toHaveBeenCalled();expect(a.dest).not.toHaveBeenCalled()});it("should destroy multiple objects",function(){Ext.destroy(c,b,a);expect(c.destroy).toHaveBeenCalled();expect(b.destroy).toHaveBeenCalled();expect(a.dest).not.toHaveBeenCalled()});it("should remove dom if object is an Ext.element",function(){var d=Ext.getBody().createChild({id:"to_destroy"});Ext.destroy(d);expect(Ext.fly("to_destroy")).toBeNull()})});describe("Ext.htmlEncode",function(){it("should delegate to Ext.String.htmlEncode",function(){spyOn(Ext.String,"htmlEncode").andCallFake(function(){return"output"});expect(Ext.htmlEncode("input")).toBe("output");expect(Ext.String.htmlEncode).toHaveBeenCalledWith("input")})});describe("Ext.htmlDecode",function(){it("should delegate to Ext.String.htmlDecode",function(){spyOn(Ext.String,"htmlDecode").andCallFake(function(){return"output"});expect(Ext.htmlDecode("input")).toBe("output");expect(Ext.String.htmlDecode).toHaveBeenCalledWith("input")})});describe("Ext.urlAppend",function(){var a="http://example.com/";it("should manage question mark",function(){expect(Ext.urlAppend(a,"test=1")).toEqual("http://example.com/?test=1")});it("should manage ampersand",function(){expect(Ext.urlAppend(a+"?test=1","foo=2")).toEqual("http://example.com/?test=1&foo=2")});it("should return directly url if content is empty",function(){expect(Ext.urlAppend(a)).toEqual(a)})});describe("Ext.getDom",function(){var a;beforeEach(function(){a=Ext.getBody().createChild({id:"elone"})});afterEach(function(){a.remove()});it("should return a dom element if an Ext.element is passed as first argument",function(){expect(Ext.getDom(a)).toEqual(a.dom)});it("should return a dom element if the string (id) passed as first argument",function(){expect(Ext.getDom("elone")).toEqual(a.dom)})});describe("Ext.removeNode",function(){describe("if passed element isn't body",function(){var a,b;beforeEach(function(){a=Ext.getBody().createChild({tag:"span",html:"foobar"});b=a.id});it("should remove a dom element from document",function(){Ext.removeNode(a.dom);expect(!a.dom.parentNode).toBe(true)});it("should delete the cache reference",function(){expect(Ext.cache[b]).toBeDefined();Ext.removeNode(a.dom);expect(Ext.cache[b]).toBeUndefined()});if(!Ext.isIE6&&!Ext.isIE7&&!Ext.isIE8){it("should remove all listeners from the dom element",function(){var c=jasmine.createSpy();a.on("mouseup",c);Ext.removeNode(a.dom);jasmine.fireMouseEvent(a.dom,"mouseup");expect(c).not.toHaveBeenCalled()})}});describe("if passed element is body",function(){it("should not delete the cache reference",function(){Ext.removeNode(document.body);expect(Ext.cache[Ext.getBody().id]).toBeDefined()});it("should not remove listeners from body",function(){var a=jasmine.createSpy();Ext.getBody().on("mouseup",a);Ext.removeNode(document.body);jasmine.fireMouseEvent(document.body,"mouseup");expect(a).toHaveBeenCalled();Ext.getBody().un("mouseup",a)})});if(!Ext.isIE6&&!Ext.isIE7&&!Ext.isIE8){describe("if enableNestedListenerRemoval is true",function(){var a,b;beforeEach(function(){Ext.enableNestedListenerRemoval=true;a=Ext.getBody().createChild();b=a.createChild()});afterEach(function(){Ext.enableNestedListenerRemoval=false});it("should remove listener on children",function(){var c=jasmine.createSpy();b.on("mouseup",c);Ext.removeNode(a.dom);jasmine.fireMouseEvent(b.dom,"mouseup");expect(c).not.toHaveBeenCalled()})});describe("if enableNestedListenerRemoval is false (default)",function(){var a,b;beforeEach(function(){a=Ext.getBody().createChild();b=a.createChild()});it("should not remove listener on children",function(){var c=jasmine.createSpy();b.on("mouseup",c);Ext.removeNode(a.dom);jasmine.fireMouseEvent(b.dom,"mouseup");expect(c).toHaveBeenCalled();Ext.EventManager.purgeElement(b.dom)})})}});describe("Ext.addBehaviors",function(){var d,b,a,c;beforeEach(function(){b=Ext.getBody().createChild({tag:"span"});a=Ext.getBody().createChild({tag:"span"});c=Ext.getBody().createChild({cls:"foo"});d=jasmine.createSpy()});afterEach(function(){b.remove();a.remove();c.remove()});it("should apply event listeners to elements by selectors",function(){Ext.addBehaviors({"span @mouseup":d});jasmine.fireMouseEvent(b.dom,"mouseup");jasmine.fireMouseEvent(a.dom,"mouseup");jasmine.fireMouseEvent(c.dom,"mouseup");expect(d.calls.length).toEqual(2)});it("should manage multiple selectors",function(){Ext.addBehaviors({"span, div.foo @mouseup":d});jasmine.fireMouseEvent(b.dom,"mouseup");jasmine.fireMouseEvent(a.dom,"mouseup");jasmine.fireMouseEvent(c.dom,"mouseup");expect(d.calls.length).toEqual(3)})});xdescribe("Ext.getScrollBarWidth",function(){it("should return a number between 10 and 40 (we assume that document is loaded)",function(){expect(Ext.getScrollBarWidth()>10).toBe(true);expect(Ext.getScrollBarWidth()<40).toBe(true)})});describe("Ext.copyTo",function(){var b,a;beforeEach(function(){b={a:1,b:2,c:3,d:4};a={}});afterEach(function(){b=null;a=null});describe("with an array of named properties",function(){it("should copy a set of named properties fom the source object to the destination object.",function(){Ext.copyTo(a,b,["a","b","e"]);expect(a).toEqual({a:1,b:2})})});describe("with a string list of named properties",function(){it("should copy a set of named properties fom the source object to the destination object.",function(){Ext.copyTo(a,b,"c,b,e");expect(a).toEqual({b:2,c:3})})})});describe("Ext.destroyMembers",function(){var b,a;beforeEach(function(){a={destroy:jasmine.createSpy()};b={a:1,b:2,c:3,d:4,me:a}});it("should remove named properties from a passed object",function(){Ext.destroyMembers(b,"a","c","i");expect(b).toEqual({b:2,d:4,me:a})});it("should attempt to destroy passed properties",function(){Ext.destroyMembers(b,"a","c","me");expect(a.destroy).toHaveBeenCalled()})});describe("Ext.partition",function(){describe("with an array of boolean",function(){it("should partition the array into two arrays: a true and a false array",function(){expect(Ext.partition([true,true,false,false,true])).toEqual([[true,true,true],[false,false]])})});describe("with an array to partition and a function to determine truth",function(){it("should partition the array into two arrays: an true and a false array",function(){var a=["a","b","c","a"];expect(Ext.partition(a,function(b){return b=="a"})).toEqual([["a","a"],["b","c"]])})});describe("with a NodeList to partition and a function to determine truth",function(){it("should partition the array into two arrays: a true and a false array",function(){var a=[];a[0]=Ext.getBody().createChild({tag:"p",cls:"class1"});a[1]=Ext.getBody().createChild({tag:"p",cls:"class2"});a[2]=Ext.getBody().createChild({tag:"p",cls:"class1"});a[3]=Ext.getBody().createChild({tag:"p",cls:"class4"});a[4]=Ext.getBody().createChild({tag:"p",cls:"class5"});a[5]=Ext.getBody().createChild({tag:"p",cls:"class1"});expect(Ext.partition(Ext.query("p"),function(b){return b.className=="class1"})).toEqual([[a[0].dom,a[2].dom,a[5].dom],[a[1].dom,a[3].dom,a[4].dom]]);Ext.Array.each(a,function(b){b.remove()})})})});describe("Ext.escapeId",function(){it("should escape element id sequences with special characters",function(){expect(Ext.escapeId("abcdef")).toBe("abcdef");expect(Ext.escapeId(".abcdef")).toBe("\\.abcdef");expect(Ext.escapeId("0a...")).toBe("\\0030 a\\.\\.\\.");expect(Ext.escapeId("12345")).toBe("\\0031 2345");expect(Ext.escapeId(".abc-def")).toBe("\\.abc\\-def");expect(Ext.escapeId("<12345/>")).toBe("\\<12345\\/\\>");expect(Ext.escapeId("1<>234.567")).toBe("\\0031 \\<\\>234\\.567")})})});