describe("Ext.Date",function(){var f,d=0,a=3,e=Date,c=function(){return{getTime:function(){},valueOf:function(){d=d+a;return d}}};function b(){Date=c}afterEach(function(){Date=e;a+=16});it("should get time elapsed in millisecond between date instantiation",function(){b();var g=new c();expect(Ext.Date.getElapsed(g)).toEqual(3)});it("should get time elapsed in millisecond between two dates",function(){b();var h=new c(),g=new c();expect(Ext.Date.getElapsed(h)).toEqual(19)});describe("now",function(){it("should return the current timestamp",function(){var h=+new Date(),i=Ext.Date.now(),g=+new Date();expect(i).not.toBeLessThan(h);expect(i).not.toBeGreaterThan(g)})});describe("getShortMonthName",function(){it("should return 3 letter abbreviation for the corresponding month [0-11]",function(){expect(Ext.Date.getShortMonthName(0)).toBe("Jan");expect(Ext.Date.getShortMonthName(1)).toBe("Feb");expect(Ext.Date.getShortMonthName(2)).toBe("Mar");expect(Ext.Date.getShortMonthName(3)).toBe("Apr");expect(Ext.Date.getShortMonthName(4)).toBe("May");expect(Ext.Date.getShortMonthName(5)).toBe("Jun");expect(Ext.Date.getShortMonthName(6)).toBe("Jul");expect(Ext.Date.getShortMonthName(7)).toBe("Aug");expect(Ext.Date.getShortMonthName(8)).toBe("Sep");expect(Ext.Date.getShortMonthName(9)).toBe("Oct");expect(Ext.Date.getShortMonthName(10)).toBe("Nov");expect(Ext.Date.getShortMonthName(11)).toBe("Dec")})});describe("getShortDayName",function(){it("should return 3 letter abbreviation for the corresponding weekday [0-6]",function(){expect(Ext.Date.getShortDayName(0)).toBe("Sun");expect(Ext.Date.getShortDayName(1)).toBe("Mon");expect(Ext.Date.getShortDayName(2)).toBe("Tue");expect(Ext.Date.getShortDayName(3)).toBe("Wed");expect(Ext.Date.getShortDayName(4)).toBe("Thu");expect(Ext.Date.getShortDayName(5)).toBe("Fri");expect(Ext.Date.getShortDayName(6)).toBe("Sat")})});describe("getMonthNumber",function(){it("should return the month number [0-11] for the corresponding short month name",function(){expect(Ext.Date.getMonthNumber("jan")).toBe(0);expect(Ext.Date.getMonthNumber("feb")).toBe(1);expect(Ext.Date.getMonthNumber("mar")).toBe(2);expect(Ext.Date.getMonthNumber("apr")).toBe(3);expect(Ext.Date.getMonthNumber("MAY")).toBe(4);expect(Ext.Date.getMonthNumber("JUN")).toBe(5);expect(Ext.Date.getMonthNumber("JUL")).toBe(6);expect(Ext.Date.getMonthNumber("AUG")).toBe(7);expect(Ext.Date.getMonthNumber("Sep")).toBe(8);expect(Ext.Date.getMonthNumber("Oct")).toBe(9);expect(Ext.Date.getMonthNumber("Nov")).toBe(10);expect(Ext.Date.getMonthNumber("Dec")).toBe(11)});it("should return the month number [0-11] for the corresponding full month name",function(){expect(Ext.Date.getMonthNumber("january")).toBe(0);expect(Ext.Date.getMonthNumber("february")).toBe(1);expect(Ext.Date.getMonthNumber("march")).toBe(2);expect(Ext.Date.getMonthNumber("april")).toBe(3);expect(Ext.Date.getMonthNumber("MAY")).toBe(4);expect(Ext.Date.getMonthNumber("JUNE")).toBe(5);expect(Ext.Date.getMonthNumber("JULY")).toBe(6);expect(Ext.Date.getMonthNumber("AUGUST")).toBe(7);expect(Ext.Date.getMonthNumber("September")).toBe(8);expect(Ext.Date.getMonthNumber("October")).toBe(9);expect(Ext.Date.getMonthNumber("November")).toBe(10);expect(Ext.Date.getMonthNumber("December")).toBe(11)})});describe("formatContainsHourInfo",function(){it("should return true when format contains hour info",function(){expect(Ext.Date.formatContainsHourInfo("d/m/Y H:i:s")).toBeTruthy()});it("should return false when format doesn't contains hour info",function(){expect(Ext.Date.formatContainsHourInfo("d/m/Y")).toBeFalsy()})});describe("formatContainsDateInfo",function(){it("should return true when format contains date info",function(){expect(Ext.Date.formatContainsDateInfo("d/m/Y H:i:s")).toBeTruthy()});it("should return false when format doesn't contains date info",function(){expect(Ext.Date.formatContainsDateInfo("H:i:s")).toBeFalsy()})});describe("isValid",function(){it("should return true for valid dates",function(){expect(Ext.Date.isValid(1981,10,15,16,30,1,2)).toBeTruthy()});it("should return false for invalid dates",function(){expect(Ext.Date.isValid(999999,10,15,16,30,1,2)).toBeFalsy();expect(Ext.Date.isValid(1981,13,15,16,30,1,2)).toBeFalsy();expect(Ext.Date.isValid(1981,10,32,16,30,1,2)).toBeFalsy();expect(Ext.Date.isValid(1981,10,15,25,30,1,2)).toBeFalsy();expect(Ext.Date.isValid(1981,10,15,16,60,1,2)).toBeFalsy();expect(Ext.Date.isValid(1981,10,15,16,30,60,2)).toBeFalsy();expect(Ext.Date.isValid(1981,10,15,16,30,1,100000)).toBeFalsy()})});describe("parse",function(){it("should parse year-only",function(){var h=Ext.Date.parse("2011","Y"),g=new Date();g.setFullYear(2011);g.setHours(0);g.setMinutes(0);g.setSeconds(0);g.setMilliseconds(0);expect(h).toEqual(g)});it("should parse year-month-date",function(){var h=Ext.Date.parse("2011-01-20","Y-m-d"),g=new Date();g.setFullYear(2011);g.setMonth(0);g.setDate(20);g.setHours(0);g.setMinutes(0);g.setSeconds(0);g.setMilliseconds(0);expect(h).toEqual(g)});it("should parse year-month-date hour:minute:second am/pm",function(){var h=Ext.Date.parse("2011-01-20 6:28:33 PM","Y-m-d g:i:s A"),g=new Date();g.setFullYear(2011);g.setMonth(0);g.setDate(20);g.setHours(18);g.setMinutes(28);g.setSeconds(33);g.setMilliseconds(0);expect(h).toEqual(g)});it("should return null when parsing an invalid date like Feb 31st in stric mode",function(){expect(Ext.Date.parse("2011-02-31","Y-m-d",true)).toBeNull()});it("should read am/pm",function(){var h=Ext.Date.parse("2010/01/01 12:45 am","Y/m/d G:i a"),g=new Date();g.setFullYear(2010);g.setMonth(0);g.setDate(1);g.setHours(0);g.setMinutes(45);g.setSeconds(0);g.setMilliseconds(0);expect(h).toEqual(g)});it("should allow am/pm before minutes",function(){var h=Ext.Date.parse("2010/01/01 am 12:45","Y/m/d a G:i"),g=new Date();g.setFullYear(2010);g.setMonth(0);g.setDate(1);g.setHours(0);g.setMinutes(45);g.setSeconds(0);g.setMilliseconds(0);expect(h).toEqual(g)});it("should correctly parse ISO format",function(){var h=Ext.Date.parse("2012-01-13T01:00:00","c"),g=new Date();g.setFullYear(2012);g.setMonth(0);g.setDate(13);g.setHours(1);g.setMinutes(0);g.setSeconds(0);g.setMilliseconds(0);expect(h).toEqual(g);h=Ext.Date.parse("2012-01-13T13:00:00","c");g.setFullYear(2012);g.setMonth(0);g.setDate(13);g.setHours(13);g.setMinutes(0);g.setSeconds(0);g.setMilliseconds(0);expect(h).toEqual(g)});describe("using separators",function(){it("should work with hyphen separators",function(){var h=Ext.Date.parse("2010-03-04","Y-m-d"),g=new Date();g.setFullYear(2010);g.setMonth(2);g.setDate(4);g.setHours(0);g.setMinutes(0);g.setSeconds(0);g.setMilliseconds(0);expect(h).toEqual(g)});it("should work with slash separators",function(){var h=Ext.Date.parse("2010/03/04","Y/m/d"),g=new Date();g.setFullYear(2010);g.setMonth(2);g.setDate(4);g.setHours(0);g.setMinutes(0);g.setSeconds(0);g.setMilliseconds(0);expect(h).toEqual(g)});it("should work with space separators",function(){var h=Ext.Date.parse("2010 03 04","Y m d"),g=new Date();g.setFullYear(2010);g.setMonth(2);g.setDate(4);g.setHours(0);g.setMinutes(0);g.setSeconds(0);g.setMilliseconds(0);expect(h).toEqual(g)})})});describe("isEqual",function(){it("should return true if both dates are exactly the same",function(){var h=new Date(2011,0,20,18,37,15,0),g=new Date(2011,0,20,18,37,15,0);expect(Ext.Date.isEqual(h,g)).toBeTruthy()});it("should return true if there is at least 1 millisecond difference between both dates",function(){var h=new Date(2011,0,20,18,37,15,0),g=new Date(2011,0,20,18,37,15,1);expect(Ext.Date.isEqual(h,g)).toBeFalsy()});it("should return false if one one of the dates is null/undefined",function(){expect(Ext.Date.isEqual(new Date(),undefined)).toBeFalsy();expect(Ext.Date.isEqual(new Date(),null)).toBeFalsy();expect(Ext.Date.isEqual(undefined,new Date())).toBeFalsy();expect(Ext.Date.isEqual(null,new Date())).toBeFalsy()});it("should return true if both dates are null/undefined",function(){expect(Ext.Date.isEqual(null,null)).toBeTruthy();expect(Ext.Date.isEqual(null,undefined)).toBeTruthy();expect(Ext.Date.isEqual(undefined,null)).toBeTruthy();expect(Ext.Date.isEqual(undefined,undefined)).toBeTruthy()})});describe("getDayOfYear",function(){it("should return the day of year between 0 and 364 for non-leap years",function(){expect(Ext.Date.getDayOfYear(new Date(2001,0,1))).toBe(0);expect(Ext.Date.getDayOfYear(new Date(2001,11,31))).toBe(364)});it("should return the day of year between 0 and 365 for leap years",function(){expect(Ext.Date.getDayOfYear(new Date(2000,0,1))).toBe(0);expect(Ext.Date.getDayOfYear(new Date(2000,11,31))).toBe(365)})});describe("getFirstDayOfMonth",function(){it("should return the number [0-6] of the first day of month of the given date",function(){expect(Ext.Date.getFirstDayOfMonth(new Date(2007,0,1))).toBe(1);expect(Ext.Date.getFirstDayOfMonth(new Date(2000,0,2))).toBe(6);expect(Ext.Date.getFirstDayOfMonth(new Date(2011,0,3))).toBe(6);expect(Ext.Date.getFirstDayOfMonth(new Date(2011,6,4))).toBe(5);expect(Ext.Date.getFirstDayOfMonth(new Date(2011,11,5))).toBe(4)})});describe("getLastDayOfMonth",function(){it("should return the number [0-6] of the last day of month of the given date",function(){expect(Ext.Date.getLastDayOfMonth(new Date(2007,0,1))).toBe(3);expect(Ext.Date.getLastDayOfMonth(new Date(2000,0,2))).toBe(1);expect(Ext.Date.getLastDayOfMonth(new Date(2011,0,3))).toBe(1);expect(Ext.Date.getLastDayOfMonth(new Date(2011,6,4))).toBe(0);expect(Ext.Date.getLastDayOfMonth(new Date(2011,11,5))).toBe(6)})});describe("getFirstDateOfMonth",function(){it("should return the date corresponding to the first day of month of the given date",function(){expect(Ext.Date.getFirstDateOfMonth(new Date(2007,0,1))).toEqual(new Date(2007,0,1));expect(Ext.Date.getFirstDateOfMonth(new Date(2000,0,2))).toEqual(new Date(2000,0,1));expect(Ext.Date.getFirstDateOfMonth(new Date(2011,0,3))).toEqual(new Date(2011,0,1));expect(Ext.Date.getFirstDateOfMonth(new Date(2011,6,4))).toEqual(new Date(2011,6,1));expect(Ext.Date.getFirstDateOfMonth(new Date(2011,11,5))).toEqual(new Date(2011,11,1))})});describe("getLastDateOfMonth",function(){it("should return the date corresponding to the last day of month of the given date",function(){expect(Ext.Date.getLastDateOfMonth(new Date(2007,1,1))).toEqual(new Date(2007,1,28));expect(Ext.Date.getLastDateOfMonth(new Date(2000,1,2))).toEqual(new Date(2000,1,29));expect(Ext.Date.getLastDateOfMonth(new Date(2011,0,3))).toEqual(new Date(2011,0,31));expect(Ext.Date.getLastDateOfMonth(new Date(2011,5,4))).toEqual(new Date(2011,5,30));expect(Ext.Date.getLastDateOfMonth(new Date(2011,11,5))).toEqual(new Date(2011,11,31))})});describe("getSuffix",function(){it("should return st for 1, 21 and 31",function(){expect(Ext.Date.getSuffix(new Date(2011,0,1))).toBe("st");expect(Ext.Date.getSuffix(new Date(2011,0,21))).toBe("st");expect(Ext.Date.getSuffix(new Date(2011,0,31))).toBe("st")});it("should return nd for 2 and, 22",function(){expect(Ext.Date.getSuffix(new Date(2011,0,2))).toBe("nd");expect(Ext.Date.getSuffix(new Date(2011,0,22))).toBe("nd")});it("should return rd for 3 and, 23",function(){expect(Ext.Date.getSuffix(new Date(2011,0,3))).toBe("rd");expect(Ext.Date.getSuffix(new Date(2011,0,23))).toBe("rd")});it("should return th for days [11-13] and days ending in [4-0]",function(){expect(Ext.Date.getSuffix(new Date(2011,0,4))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,5))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,6))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,7))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,8))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,9))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,10))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,11))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,12))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,13))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,14))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,15))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,16))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,17))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,18))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,19))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,20))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,24))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,25))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,26))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,27))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,28))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,29))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,30))).toBe("th")})});describe("clone",function(){it("should return a copy of the given date",function(){var g=new Date(),h;h=Ext.Date.clone(g);expect(h).not.toBe(g);expect(h).toEqual(g)})});describe("isDST",function(){xit("should return true from the end of March till the middle of October",function(){expect(Ext.Date.isDST(new Date(2010,2,31))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,3,15))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,4,15))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,5,15))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,6,15))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,7,15))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,8,15))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,9,15))).toBeTruthy()});it("should return false from the middle of November till the start of March",function(){expect(Ext.Date.isDST(new Date(2010,10,15))).toBeFalsy();expect(Ext.Date.isDST(new Date(2010,11,15))).toBeFalsy();expect(Ext.Date.isDST(new Date(2010,0,15))).toBeFalsy();expect(Ext.Date.isDST(new Date(2010,1,15))).toBeFalsy();expect(Ext.Date.isDST(new Date(2010,2,1))).toBeFalsy()})});describe("clearTime",function(){it("should reset hrs/mins/secs/millis to 0",function(){var g=new Date(2012,11,21,21,21,21,21);Ext.Date.clearTime(g);expect(g.getHours()).toBe(0);expect(g.getMinutes()).toBe(0);expect(g.getSeconds()).toBe(0);expect(g.getMilliseconds()).toBe(0)});it("should return a clone with hrs/mins/secs/millis reseted to 0 when clone option is selected",function(){var g=new Date(2012,11,21,21,21,21,21),h;h=Ext.Date.clearTime(g,true);expect(g.getHours()).toBe(21);expect(g.getMinutes()).toBe(21);expect(g.getSeconds()).toBe(21);expect(g.getMilliseconds()).toBe(21);expect(h.getHours()).toBe(0);expect(h.getMinutes()).toBe(0);expect(h.getSeconds()).toBe(0);expect(h.getMilliseconds()).toBe(0)})});describe("add",function(){var g=new Date(2000,0,1,0,0,0,0);it("should add milliseconds",function(){expect(Ext.Date.add(g,Ext.Date.MILLI,1)).toEqual(new Date(2000,0,1,0,0,0,1))});it("should add seconds",function(){expect(Ext.Date.add(g,Ext.Date.SECOND,1)).toEqual(new Date(2000,0,1,0,0,1,0))});it("should add minutes",function(){expect(Ext.Date.add(g,Ext.Date.MINUTE,1)).toEqual(new Date(2000,0,1,0,1,0,0))});it("should add hours",function(){expect(Ext.Date.add(g,Ext.Date.HOUR,1)).toEqual(new Date(2000,0,1,1,0,0,0))});it("should add days",function(){expect(Ext.Date.add(g,Ext.Date.DAY,1)).toEqual(new Date(2000,0,2,0,0,0,0))});it("should add months",function(){expect(Ext.Date.add(g,Ext.Date.MONTH,1)).toEqual(new Date(2000,1,1,0,0,0,0))});it("should add years",function(){expect(Ext.Date.add(g,Ext.Date.YEAR,1)).toEqual(new Date(2001,0,1,0,0,0,0))});it("should consider last day of month when adding months",function(){expect(Ext.Date.add(new Date(2001,0,29),Ext.Date.MONTH,1)).toEqual(new Date(2001,1,28));expect(Ext.Date.add(new Date(2001,0,30),Ext.Date.MONTH,1)).toEqual(new Date(2001,1,28));expect(Ext.Date.add(new Date(2001,0,31),Ext.Date.MONTH,1)).toEqual(new Date(2001,1,28));expect(Ext.Date.add(new Date(2000,0,29),Ext.Date.MONTH,1)).toEqual(new Date(2000,1,29));expect(Ext.Date.add(new Date(2000,0,30),Ext.Date.MONTH,1)).toEqual(new Date(2000,1,29));expect(Ext.Date.add(new Date(2000,0,31),Ext.Date.MONTH,1)).toEqual(new Date(2000,1,29))});it("should consider last day of month when adding years",function(){expect(Ext.Date.add(new Date(2000,1,29),Ext.Date.YEAR,1)).toEqual(new Date(2001,1,28))})});describe("between",function(){var g=new Date(2000,0,1),h=new Date(2000,0,31);it("should return true if the date is equal to the start date",function(){expect(Ext.Date.between(new Date(2000,0,1),g,h)).toBeTruthy()});it("should return true if the date is equal to the end date",function(){expect(Ext.Date.between(new Date(2000,0,31),g,h)).toBeTruthy()});it("should return true if date is between start and end dates",function(){expect(Ext.Date.between(new Date(2000,0,15),g,h)).toBeTruthy()});it("should return false if date is before start date",function(){expect(Ext.Date.between(new Date(1999,11,31,23,59,59),g,h)).toBeFalsy()});it("should return false if date is after end date",function(){expect(Ext.Date.between(new Date(2000,0,31,0,0,1),g,h)).toBeFalsy()})});describe("formatting",function(){var g=new Date(2010,0,1,13,45,32,4),h=Ext.Date.format;it("should format with the d option",function(){expect(h(g,"d")).toBe("01")});it("should format with the D option",function(){expect(h(g,"D")).toBe("Fri")});it("should format with the j option",function(){expect(h(g,"j")).toBe("1")});it("should format with the l option",function(){expect(h(g,"l")).toBe("Friday")});it("should format with the N option",function(){expect(h(g,"N")).toBe("5")});it("should format with the S option",function(){expect(h(g,"S")).toBe("st")});it("should format with the w option",function(){expect(h(g,"w")).toBe("5")});it("should format with the z option",function(){expect(h(g,"z")).toBe("0")});it("should format with the W option",function(){expect(h(g,"W")).toBe("53")});it("should format with the F option",function(){expect(h(g,"F")).toBe("January")});it("should format with the m option",function(){expect(h(g,"m")).toBe("01")});it("should format with the M option",function(){expect(h(g,"M")).toBe("Jan")});it("should format with the n option",function(){expect(h(g,"n")).toBe("1")});it("should format with the t option",function(){expect(h(g,"t")).toBe("31")});it("should format with the L option",function(){expect(h(g,"L")).toBe("0")});it("should format with the o option",function(){expect(h(g,"o")).toBe("2009")});it("should format with the Y option",function(){expect(h(g,"Y")).toBe("2010")});it("should format with the y option",function(){expect(h(g,"y")).toBe("10")});it("should format with the a option",function(){expect(h(g,"a")).toBe("pm")});it("should format with the A option",function(){expect(h(g,"A")).toBe("PM")});it("should format with the g option",function(){expect(h(g,"g")).toBe("1")});it("should format with the G option",function(){expect(h(g,"G")).toBe("13")});it("should format with the h option",function(){expect(h(g,"h")).toBe("01")});it("should format with the H option",function(){expect(h(g,"H")).toBe("13")});it("should format with the i option",function(){expect(h(g,"i")).toBe("45")});it("should format with the s option",function(){expect(h(g,"s")).toBe("32")});it("should format with the u option",function(){expect(h(g,"u")).toBe("004")});it("should format with the O option",function(){var i=Ext.Date.getGMTOffset(g,false);expect(h(g,"O")).toBe(i)});it("should format with the P option",function(){var i=Ext.Date.getGMTOffset(g,true);expect(h(g,"P")).toBe(i)});it("should format with the T option",function(){var i=Ext.Date.getTimezone(g);expect(h(g,"T")).toBe(i)});it("should format with the Z option",function(){var i=(g.getTimezoneOffset()*-60)+"";expect(h(g,"Z")).toBe(i)});it("should format with the c option",function(){var i="2010-01-01T13:45:32"+Ext.Date.getGMTOffset(g,true);expect(h(g,"c")).toBe(i)});it("should format with the U option",function(){var i=Math.round((g.getTime()/1000))+"";expect(h(g,"U")).toBe(i)});it("should format with the MS option",function(){var i="\\/Date("+g.getTime()+")\\/";expect(h(g,"MS")).toBe(i)});it("should return an empty string",function(){expect(h(undefined,"d")).toBe("");expect(h(null,"d")).toBe("");expect(h({},"d")).toBe("");expect(h([],"d")).toBe("");expect(h("","d")).toBe("");expect(h(true,"d")).toBe("");expect(h(1992,"d")).toBe("")});it("should not return an empty string",function(){expect(h(new Date(),"d")).not.toBe("")})})});