describe("Ext.Class",function(){var b=function(){},a;beforeEach(function(){window.My={awesome:{Class:function(){},Class1:function(){},Class2:function(){}},cool:{AnotherClass:function(){},AnotherClass1:function(){},AnotherClass2:function(){}}}});afterEach(function(){if(window.My){window.My=undefined}try{delete window.My}catch(c){}});describe("preprocessors",function(){beforeEach(function(){a=Ext.Class.create(null,{})});describe("extend",function(){it("should extend from Base if no 'extend' property found",function(){var c={};Ext.Class.preprocessors.extend.fn(a,c,b,{},b);expect((new a) instanceof Ext.Base).toBeTruthy()});it("should extend from given parent class",function(){var c={extend:My.awesome.Class};Ext.Class.preprocessors.extend.fn(a,c,b,{},b);expect((new a) instanceof My.awesome.Class).toBeTruthy()});it("should have superclass reference",function(){var d={extend:My.awesome.Class};var c=My.awesome.Class.prototype;Ext.Class.preprocessors.extend.fn(a,d,b,{},b);expect(a.superclass).toEqual(c);expect((new a).superclass).toEqual(c)})});describe("other preprocessors",function(){beforeEach(function(){Ext.Class.preprocessors.extend.fn(a,{},b,{},b)});describe("config",function(){it("should create getter if not exists",function(){var c={config:{someName:"someValue"}};Ext.Class.preprocessors.config.fn(a,c,b,{},b);expect(c.getSomeName).toBeDefined()});it("should NOT create getter if already exists",function(){var d={config:{someName:"someValue"}};var c=false;a.prototype.getSomeName=function(){c=true};Ext.Class.preprocessors.config.fn(a,d,b,{},b);expect(d.getSomeName).not.toBeDefined()});it("should create setter if not exists",function(){var c={config:{someName:"someValue"}};Ext.Class.preprocessors.config.fn(a,c,b,{},b);expect(c.setSomeName).toBeDefined()});it("should NOT create setter if already exists",function(){var d={config:{someName:"someValue"}};var c=false;a.prototype.setSomeName=function(){c=true};Ext.Class.preprocessors.config.fn(a,d,b,{},b);expect(d.setSomeName).not.toBeDefined()})});describe("statics",function(){it("should copy static properties to the class",function(){var c={statics:{someName:"someValue",someMethod:Ext.emptyFn}};Ext.Class.preprocessors.statics.fn(a,c,b,{},b);var d=new a;expect(c.statics).not.toBeDefined();expect(a.someName).toBe("someValue");expect(a.someMethod).toBe(Ext.emptyFn)})});describe("inheritableStatics",function(){it("should store names of inheritable static properties",function(){var c={inheritableStatics:{someName:"someValue",someMethod:Ext.emptyFn}};Ext.Class.preprocessors.inheritableStatics.fn(a,c,b,{},b);var d=new a;expect(d.inheritableStatics).not.toBeDefined();expect(a.someName).toBe("someValue");expect(a.prototype.$inheritableStatics).toEqual(["someName","someMethod"]);expect(a.someMethod).toBe(Ext.emptyFn)});it("should inherit inheritable statics",function(){var d={inheritableStatics:{someName:"someValue",someMethod:Ext.emptyFn}},c=Ext.Class.create(null,{});Ext.Class.preprocessors.inheritableStatics.fn(a,d,b,{},b);Ext.Class.preprocessors.extend.fn(c,{extend:a},b,{},b);expect(c.someName).toEqual("someValue");expect(c.someMethod).toBe(Ext.emptyFn)});it("should NOT inherit inheritable statics if the class already has it",function(){var d={inheritableStatics:{someName:"someValue",someMethod:Ext.emptyFn}},c=Ext.Class.create(null,{});c.someName="someOtherValue";c.someMethod=function(){};Ext.Class.preprocessors.inheritableStatics.fn(a,d,b,{},b);Ext.Class.preprocessors.extend.fn(c,{extend:a},b,{},b);expect(c.someName).toEqual("someOtherValue");expect(c.someMethod).not.toBe(Ext.emptyFn)})})})});describe("Instantiation",function(){var d,c,f,e;beforeEach(function(){f=new Ext.Class({config:{mixinConfig:"mixinConfig"},constructor:function(g){this.initConfig(g);this.mixinConstructor1Called=true},mixinProperty1:"mixinProperty1",mixinMethod1:function(){this.mixinMethodCalled=true}});e=new Ext.Class({constructor:function(g){this.initConfig(g);this.mixinConstructor2Called=true},mixinProperty2:"mixinProperty2",mixinMethod2:function(){this.mixinMethodCalled=true}});c=new Ext.Class({mixins:{mixin1:f},config:{name:"parentClass",isCool:false,members:{abe:"Abraham Elias",ed:"Ed Spencer"},hobbies:["football","bowling"]},constructor:function(g){this.initConfig(g);this.parentConstructorCalled=true;this.mixins.mixin1.constructor.apply(this,arguments)},parentProperty:"parentProperty",parentMethod:function(){this.parentMethodCalled=true}});d=new Ext.Class({extend:c,mixins:{mixin1:f,mixin2:e},config:{name:"subClass",isCool:true,members:{jacky:"Jacky Nguyen",tommy:"Tommy Maintz"},hobbies:["sleeping","eating","movies"],isSpecial:true},constructor:function(g){this.initConfig(g);this.subConstrutorCalled=true;d.superclass.constructor.apply(this,arguments);this.mixins.mixin2.constructor.apply(this,arguments)},myOwnMethod:function(){this.myOwnMethodCalled=true}})});describe("addStatics",function(){it("single with name - value arguments",function(){var g=false;d.addStatics({staticMethod:function(){g=true}});expect(d.staticMethod).toBeDefined();d.staticMethod();expect(g).toBeTruthy()});it("multiple with object map argument",function(){d.addStatics({staticProperty:"something",staticMethod:function(){}});expect(d.staticProperty).toEqual("something");expect(d.staticMethod).toBeDefined()})});describe("override",function(){it("should override",function(){d.override({myOwnMethod:function(){this.isOverridden=true;this.callOverridden(arguments)}});var g=new d;g.myOwnMethod();expect(g.isOverridden).toBe(true);expect(g.myOwnMethodCalled).toBe(true)})});describe("define override",function(){var h,g;beforeEach(function(){g=[];function i(){g.push(this.$className)}Ext.define("Foo.UnusedOverride",{override:"Foo.Nothing",foo:function(j){return this.callParent([j*2])}},i);Ext.define("Foo.SingletonOverride",{override:"Foo.Singleton",foo:function(j){return this.callParent([j*2])}},i);Ext.define("Foo.Singleton",{singleton:true,foo:function(j){return j}});Ext.define("Foo.SomeClass",{method1:function(j){return"b"+j},statics:{staticMethod:function(j){return"B"+j}}});Ext.define("Foo.SomeClassOverride",{override:"Foo.SomeClass",method1:function(j){return"a"+this.callParent([j*2])+"c"},method2:function(){return"two"},statics:{newStatic:function(){return"boo"},staticMethod:function(j){return"A"+this.callParent([j*2])+"C"}}},i);h=Ext.create("Foo.SomeClass")});afterEach(function(){var j=Ext.ClassManager.classes,i=Ext.ClassManager.maps.alternateToName;try{delete Ext.global.Foo}catch(k){Ext.global.Foo=null}h=null;Ext.each(["Foo.SingletonOverride","Foo.Singleton","Foo.SomeClassOverride","Foo.SomeClass"],function(l){try{delete j[l];delete i[l]}catch(m){j[l]=null;i[l]=null}})});it("should call the createdFn",function(){expect(g.length).toEqual(2);expect(g[0]).toEqual("Foo.Singleton");expect(g[1]).toEqual("Foo.SomeClass")});it("can add new methods",function(){expect(h.method2()).toEqual("two")});it("can add new static methods",function(){expect(Foo.SomeClass.newStatic()).toEqual("boo")});it("callParent should work for instance methods",function(){expect(h.method1(21)).toEqual("ab42c")});it("callParent should work for static methods",function(){expect(Foo.SomeClass.staticMethod(21)).toEqual("AB42C")});it("works with singletons",function(){expect(Foo.Singleton.foo(21)).toEqual(42)})});describe("mixin",function(){it("should have all properties of mixins",function(){var g=new d;expect(g.mixinProperty1).toEqual("mixinProperty1");expect(g.mixinProperty2).toEqual("mixinProperty2");expect(g.mixinMethod1).toBeDefined();expect(g.mixinMethod2).toBeDefined();expect(g.config.mixinConfig).toEqual("mixinConfig")})});describe("config",function(){it("should merge properly",function(){var g=new d;expect(g.config).toEqual({mixinConfig:"mixinConfig",name:"subClass",isCool:true,members:{abe:"Abraham Elias",ed:"Ed Spencer",jacky:"Jacky Nguyen",tommy:"Tommy Maintz"},hobbies:["sleeping","eating","movies"],isSpecial:true})});it("should apply default config",function(){var g=new d;expect(g.getName()).toEqual("subClass");expect(g.getIsCool()).toEqual(true);expect(g.getHobbies()).toEqual(["sleeping","eating","movies"])});it("should apply with supplied config",function(){var g=new d({name:"newName",isCool:false,members:{aaron:"Aaron Conran"}});expect(g.getName()).toEqual("newName");expect(g.getIsCool()).toEqual(false);expect(g.getMembers().aaron).toEqual("Aaron Conran")});it("should not share the same config",function(){var h=new d({name:"newName",isCool:false,members:{aaron:"Aaron Conran"}});var g=new d();expect(g.getName()).not.toEqual("newName")})});describe("overriden methods",function(){it("should call self constructor",function(){var g=new d;expect(g.subConstrutorCalled).toBeTruthy()});it("should call parent constructor",function(){var g=new d;expect(g.parentConstructorCalled).toBeTruthy()});it("should call mixins constructors",function(){var g=new d;expect(g.mixinConstructor1Called).toBeTruthy();expect(g.mixinConstructor2Called).toBeTruthy()})})})});