describe("Ext.Array",function(){var b;describe("Ext.Array.indexOf",function(){describe("without from argument",function(){beforeEach(function(){b=[1,2,3,4,5,6]});afterEach(function(){b=null});it("should always return -1 on an empty array",function(){expect(Ext.Array.indexOf([],1)).toEqual(-1)});it("should return -1 if them it doesn't exist",function(){expect(Ext.Array.indexOf(b,7)).toEqual(-1)});it("should return the matching index if found",function(){expect(Ext.Array.indexOf(b,4)).toEqual(3)});it("should return the first matching index if found",function(){b.push(1);expect(Ext.Array.indexOf(b,1)).toEqual(0)})});describe("with from argument",function(){beforeEach(function(){b=[1,2,3,4,5,6,7]});it("should return the matched index if found",function(){expect(Ext.Array.indexOf(b,5,3)).toEqual(4);expect(Ext.Array.indexOf(b,5,4)).toEqual(4)});it("should return -1 if the item doesn't exist after the passed from value",function(){expect(Ext.Array.indexOf(b,5,5)).toEqual(-1)})})});describe("removing items",function(){var c;it("should do nothing when removing from an empty array",function(){c=[];expect(function(){Ext.Array.remove(c,1)}).not.toRaiseExtError();expect(c).toEqual([])});describe("when removing an item inside an array",function(){beforeEach(function(){c=[1,2,3,4,5];Ext.Array.remove(c,1)});it("should remove the item",function(){expect(c).toEqual([2,3,4,5])});it("should update the index of the following items",function(){expect(c[1]).toEqual(3);expect(c[2]).toEqual(4);expect(c[3]).toEqual(5)});it("should remove only using a strict type check",function(){Ext.Array.remove(c,"2");expect(c).toEqual([2,3,4,5])})})});describe("contains",function(){it("should always return false with an empty array",function(){expect(Ext.Array.contains([],1)).toBe(false)});it("should return false if an item does not exist in the array",function(){expect(Ext.Array.contains([1,2,3],10)).toBe(false)});it("should return true if an item exists in the array",function(){expect(Ext.Array.contains([8,9,10],10)).toBe(true)});it("should only match with strict type checking",function(){expect(Ext.Array.contains([1,2,3,4,5],"1")).toBe(false)})});describe("include",function(){var c;it("should always add to an empty array",function(){c=[];Ext.Array.include(c,1);expect(c).toEqual([1])});it("should add the item if it doesn't exist",function(){c=[1];Ext.Array.include(c,2);expect(c).toEqual([1,2])});it("should always add to the end of the array",function(){c=[9,8,7,6];Ext.Array.include(c,10);expect(c).toEqual([9,8,7,6,10])});it("should match using strict type checking",function(){c=["1"];Ext.Array.include(c,1);expect(c).toEqual(["1",1])});it("should not modify the array if the value exists",function(){c=[4,5,6];Ext.Array.include(c,7);expect(c).toEqual([4,5,6,7])})});describe("clone",function(){it("should clone an empty array to be empty",function(){expect(Ext.Array.clone([])).toEqual([])});it("should clone an array with items",function(){expect(Ext.Array.clone([1,3,5])).toEqual([1,3,5])});it("should create a new reference",function(){var c=[1,2,3];expect(Ext.Array.clone(c)).not.toBe(c)});it("should do a shallow clone",function(){var e={},d=[e],c;c=Ext.Array.clone(d);expect(c[0]).toBe(e)})});describe("clean",function(){it("should return an empty array if cleaning an empty array",function(){expect(Ext.Array.clean([])).toEqual([])});it("should remove undefined values",function(){expect(Ext.Array.clean([undefined])).toEqual([])});it("should remove null values",function(){expect(Ext.Array.clean([null])).toEqual([])});it("should remove empty strings",function(){expect(Ext.Array.clean([""])).toEqual([])});it("should remove empty arrays",function(){expect(Ext.Array.clean([[]])).toEqual([])});it("should remove a mixture of empty values",function(){expect(Ext.Array.clean([null,undefined,"",[]])).toEqual([])});it("should remove all occurrences of empty values",function(){expect(Ext.Array.clean([null,null,null,undefined,"","","",undefined])).toEqual([])});it("should leave non empty values untouched",function(){expect(Ext.Array.clean([1,2,3])).toEqual([1,2,3])});it("should remove only the empty values",function(){expect(Ext.Array.clean([undefined,null,1,null,2])).toEqual([1,2])});it("should preserve order on removal",function(){expect(Ext.Array.clean([1,null,2,null,null,null,3,undefined,"","",4])).toEqual([1,2,3,4])})});describe("unique",function(){it("should return an empty array if run on an empty array",function(){expect(Ext.Array.unique([])).toEqual([])});it("should return a new reference",function(){var c=[1,2,3];expect(Ext.Array.unique(c)).not.toBe(c)});it("should return a copy if all items are unique",function(){expect(Ext.Array.unique([6,7,8])).toEqual([6,7,8])});it("should only use strict typing to match",function(){expect(Ext.Array.unique([1,"1"])).toEqual([1,"1"])});it("should preserve the order when removing",function(){expect(Ext.Array.unique([1,2,1,3,1,1,1,6,5,1])).toEqual([1,2,3,6,5])})});describe("map",function(){var c=function(d){return d};it("should return an empty array if run on an empty array",function(){expect(Ext.Array.map([],function(){})).toEqual([])});it("should return a new reference",function(){var d=[1,2];expect(Ext.Array.map(d,c)).not.toBe(d)});it("should execute the function for each item in the array",function(){expect(Ext.Array.map([1,2,3,4,5],function(d){return d*2})).toEqual([2,4,6,8,10])});it("should get called with the correct scope",function(){var d={},e;Ext.Array.map([1,2,3,4,5],function(){e=this},d);expect(e).toBe(d)});it("should get called with the argument, index and array",function(){var f,e,d,g=[1];Ext.Array.map(g,function(){f=arguments[0];e=arguments[1];d=arguments[2]});expect(f).toEqual(1);expect(e).toEqual(0);expect(d).toBe(g)})});describe("from",function(){it("should return an empty array for an undefined value",function(){expect(Ext.Array.from(undefined)).toEqual([])});it("should return an empty array for a null value",function(){expect(Ext.Array.from(null)).toEqual([])});it("should convert an array",function(){expect(Ext.Array.from([1,2,3])).toEqual([1,2,3])});it("should preserve the order",function(){expect(Ext.Array.from(["a","string","here"])).toEqual(["a","string","here"])});it("should convert a single value to an array",function(){expect(Ext.Array.from(true)).toEqual([true]);expect(Ext.Array.from(700)).toEqual([700])});it("should convert arguments to an array",function(){var d,c=function(){d=Ext.Array.from(arguments)};c(1,2,3);expect(d instanceof Array).toBeTruthy();expect(d).toEqual([1,2,3])});it("should convert a DOM collection to an array",function(){var g=document.body.appendChild(document.createElement("div")),f=g.appendChild(document.createElement("div")),e=g.appendChild(document.createElement("div")),d=g.appendChild(document.createElement("div")),h=g.getElementsByTagName("div"),c=Ext.Array.from(h);expect(c instanceof Array).toBeTruthy();expect(c).toEqual([f,e,d]);document.body.removeChild(g)});it("should convert a single string",function(){expect(Ext.Array.from("Foo")).toEqual(["Foo"])});it("should convert a single string",function(){var c=function(){};expect(Ext.Array.from(c)).toEqual([c])})});describe("toArray",function(){it("should convert an array",function(){expect(Ext.Array.toArray([1,2,3,4])).toEqual([1,2,3,4])});it("should convert a string",function(){expect(Ext.Array.toArray("12345")).toEqual(["1","2","3","4","5"])});it("should create a new reference",function(){var c=[6,7,8];expect(Ext.Array.toArray(c)).not.toBe(c)});it("should convert arguments",function(){var d,c=function(){d=Ext.Array.toArray(arguments)};c(-1,-2,-3);expect(d instanceof Array).toBeTruthy();expect(d).toEqual([-1,-2,-3])});it("should convert a DOM collection",function(){var g=document.body.appendChild(document.createElement("div")),f=g.appendChild(document.createElement("div")),e=g.appendChild(document.createElement("div")),d=g.appendChild(document.createElement("div")),h=g.getElementsByTagName("div"),c=Ext.Array.toArray(h);expect(c instanceof Array).toBeTruthy();expect(c).toEqual([f,e,d]);document.body.removeChild(g)});describe("start/end parameters",function(){it("should default to whole of the array",function(){expect(Ext.Array.toArray([1,2,3,4,5,6,7,8,9,10])).toEqual([1,2,3,4,5,6,7,8,9,10])});it("should work with only the start parameter specified",function(){expect(Ext.Array.toArray([1,2,3,4,5,6],2)).toEqual([3,4,5,6])});it("should work with only the end parameter specified",function(){expect(Ext.Array.toArray([1,2,3,4,5,6],null,4)).toEqual([1,2,3,4])});it("should work with both params specified",function(){expect(Ext.Array.toArray([1,2,3,4,5,6],2,4)).toEqual([3,4])});it("should work with nagative end",function(){expect(Ext.Array.toArray([1,2,3,4,5,6],2,-1)).toEqual([3,4,5])})})});describe("pluck",function(){it("should return an empty array when an empty array is passed",function(){expect(Ext.Array.pluck([],"prop")).toEqual([])});it("should pull the properties from objects in the array",function(){var c=[{prop:1},{prop:2},{prop:3}];expect(Ext.Array.pluck(c,"prop")).toEqual([1,2,3])});it("should return a new reference",function(){var c=[{prop:1},{prop:2},{prop:3}];expect(Ext.Array.pluck(c,"prop")).not.toBe(c)});it("should work on a DOM collection",function(){var d=document.body.appendChild(document.createElement("div")),c=0,e;for(;c<5;++c){e=d.appendChild(document.createElement("div"));e.className="node"+c}expect(Ext.Array.pluck(d.getElementsByTagName("div"),"className")).toEqual(["node0","node1","node2","node3","node4"]);document.body.removeChild(d)})});describe("filter",function(){var c=function(){return true};it("should return an empty array if filtering an empty array",function(){expect(Ext.Array.filter([],c)).toEqual([])});it("should create a new reference",function(){var d=[1,2,3];expect(Ext.Array.filter(d,c)).not.toBe(d)});it("should add items if the filter function returns true",function(){expect(Ext.Array.filter([1,2,3,4,5,6,7,8,9,10],function(d){return d%2===0})).toEqual([2,4,6,8,10])});it("should add items if the filter function returns a truthy value",function(){expect(Ext.Array.filter([1,2,3,4,5,6,7,8,9,10],function(d){if(d%2===0){return 1}})).toEqual([2,4,6,8,10])});it("should not add items if the filter function returns a falsy value",function(){expect(Ext.Array.filter([1,2,3,4,5,6,7,8,9,10],function(d){return 0})).toEqual([])});it("should pass the correct parameters",function(){var d=[],f=[],e=[],g=[1,2,3];Ext.Array.filter([1,2,3],function(j,i,h){d.push(j);f.push(i);e.push(h)});expect(d).toEqual([1,2,3]);expect(f).toEqual([0,1,2]);expect(e).toEqual([g,g,g])});it("should do a shallow copy",function(){var f={prop:1},e={prop:2},d={prop:3};expect(Ext.Array.filter([f,e,d],c)).toEqual([f,e,d])});it("should execute in scope when passed",function(){var d={},e;expect(Ext.Array.filter([1,2,3],function(){e=this},d));expect(e).toBe(d)})});describe("forEach",function(){it("should not execute on an empty array",function(){var c=0;Ext.Array.forEach([],function(){++c});expect(c).toEqual(0)});it("should execute for each item in the array",function(){var c=0;Ext.Array.forEach([1,2,3,4,5],function(){++c});expect(c).toEqual(5)});it("should execute in the appropriate scope",function(){var c={},d;Ext.Array.forEach([1,2,3],function(){d=this},c);expect(d).toBe(c)});it("should pass the appropriate params to the callback",function(){var c=[],e=[],d=[],f=[1,2,3];Ext.Array.forEach(f,function(i,h,g){c.push(i);e.push(h);d.push(g)});expect(c).toEqual([1,2,3]);expect(e).toEqual([0,1,2]);expect(d).toEqual([f,f,f])})});describe("each",function(){describe("return values",function(){xit("should return 0 if the passed value is empty",function(){expect(Ext.Array.each([])).toEqual(0)});it("should return the stopping index if iteration is halted",function(){expect(Ext.Array.each([1,2,3],function(c){return c!=2})).toEqual(1)});it("should return true if iteration is not stopped",function(){expect(Ext.Array.each([4,5,6],function(){return true})).toBeTruthy()})});describe("scope/parameters",function(){it("should execute in the specified scope",function(){var c={},d;Ext.Array.each([1,2,3],function(){d=this},c);expect(d).toBe(c)});it("should pass the item, index and array",function(){var c=[],e=[],d=[],f=[1,2,3];Ext.Array.each(f,function(i,h,g){c.push(i);e.push(h);d.push(g)});expect(c).toEqual([1,2,3]);expect(e).toEqual([0,1,2]);expect(d).toEqual([f,f,f])})});describe("stopping iteration",function(){it("should not stop iteration by default",function(){var c=0;Ext.Array.each([1,2,3,4,5],function(){++c});expect(c).toEqual(5)});it("should not stop unless an explicit false is returned",function(){var c=0;Ext.Array.each([1,2,3,4,5],function(){++c;return null});expect(c).toEqual(5)});it("should stop immediately if false is returned",function(){var c=0;Ext.Array.each([1,2,3,4,5],function(d){++c;return d!=2});expect(c).toEqual(2)})});describe("other collection types",function(){it("should iterate arguments",function(){var e,c=[],d=function(){e=Ext.Array.each(arguments,function(f){c.push(f)})};d(1,2,3);expect(c).toEqual([1,2,3])});it("should iterate over a DOM collection",function(){var g=document.body.appendChild(document.createElement("div")),f=g.appendChild(document.createElement("div")),e=g.appendChild(document.createElement("div")),d=g.appendChild(document.createElement("div")),h=g.getElementsByTagName("div"),c=[];Ext.Array.each(h,function(i){c.push(i.tagName.toLowerCase())});expect(c).toEqual(["div","div","div"]);document.body.removeChild(g)})});it("should iterate once over a single, non empty value",function(){var c=0;Ext.Array.each("string",function(){++c});expect(c).toEqual(1)});describe("reverse iteraction",function(){it("should iterate backwards",function(){var d=[],c=[1,2,3],e=function(f){d.push(f)};Ext.Array.each(c,e,undefined,true);expect(d).toEqual([3,2,1])});it("should iterate backwards and stop when fn returns false",function(){var d=[],c=[1,2,3],e=function(f){d.push(f);if(f===2){return false}};Ext.Array.each(c,e,undefined,true);expect(d).toEqual([3,2])})})});describe("every",function(){describe("scope/params",function(){it("should execute in the specified scope",function(){var c={},d;Ext.Array.every([1,2,3],function(){d=this},c);expect(d).toBe(c)});it("should pass the item, index and array",function(){var c=[],e=[],d=[],f=[1,2,3];Ext.Array.every(f,function(i,h,g){c.push(i);e.push(h);d.push(g);return true});expect(c).toEqual([1,2,3]);expect(e).toEqual([0,1,2]);expect(d).toEqual([f,f,f])})});it("should return true on an empty array",function(){expect(Ext.Array.every([],function(){})).toBeTruthy()});it("should throw an exception if no fn is passed",function(){expect(function(){Ext.Array.every([1,2,3])}).toRaiseExtError()});it("should stop as soon as a false value is found",function(){var d=0,c;c=Ext.Array.every([true,true,false,true],function(e){++d;return e});expect(d).toEqual(3);expect(c).toBeFalsy()});it("should return true if all values match the function",function(){expect(Ext.Array.every([1,2,3,4,5,6,7,8,9],function(c){return c<10})).toBeTruthy()})});describe("some",function(){describe("scope/params",function(){it("should execute in the specified scope",function(){var c={},d;Ext.Array.some([1,2,3],function(){d=this},c);expect(d).toBe(c)});it("should pass the item, index and array",function(){var c=[],e=[],d=[],f=[1,2,3];Ext.Array.some(f,function(i,h,g){c.push(i);e.push(h);d.push(g);return true});expect(c).toEqual([1]);expect(e).toEqual([0]);expect(d).toEqual([f])})});it("should return false on an empty array",function(){expect(Ext.Array.some([],function(){})).toBeFalsy()});it("should throw an exception if no fn is passed",function(){expect(function(){Ext.Array.some([1,2,3])}).toRaiseExtError()});it("should stop as soon as a matching value is found",function(){var d=0,c;c=Ext.Array.some([1,2,3,4],function(e){++d;return e==3});expect(d).toEqual(3);expect(c).toBeTruthy()});it("should return false if nothing matches the matcher function",function(){var d=0,c;c=Ext.Array.some([1,2,3,4,5,6,7,8,9],function(e){++d;return e>9});expect(d).toEqual(9);expect(c).toBeFalsy()})});describe("merge",function(){it("should return an empty array if run on an empty array",function(){expect(Ext.Array.merge([])).toEqual([])});it("should return a new reference",function(){var c=[1,2,3];expect(Ext.Array.merge(c)).not.toBe(c)});it("should return a copy if all items are unique",function(){expect(Ext.Array.merge([6,7,8])).toEqual([6,7,8])});it("should only use strict typing to match",function(){expect(Ext.Array.merge([1,"1"])).toEqual([1,"1"])});it("should accept two or more arrays and return a unique union with items in order of first appearance",function(){expect(Ext.Array.merge([1,2,3],["1","2","3"],[4,1,5,2],[6,3,7,"1"],[8,"2",9,"3"])).toEqual([1,2,3,"1","2","3",4,5,6,7,8,9])})});describe("intersect",function(){it("should return an empty array if no arrays are passed",function(){expect(Ext.Array.intersect()).toEqual([])});it("should return an empty array if one empty array is passed",function(){expect(Ext.Array.intersect([])).toEqual([])});it("should return a new reference",function(){var c=[1,2,3];expect(Ext.Array.intersect(c)).not.toBe(c)});it("should return a copy if one array is passed",function(){expect(Ext.Array.intersect([6,7,8])).toEqual([6,7,8])});it("should return an intersection of two or more arrays with items in order of first appearance",function(){expect(Ext.Array.intersect([1,2,3],[4,3,2,5],[2,6,3])).toEqual([2,3])});it("should return an empty array if there is no intersecting values",function(){expect(Ext.Array.intersect([1,2,3],[4,5,6])).toEqual([])});it("should contain the unique set of intersected values only",function(){expect(Ext.Array.intersect([1,1,2,3,3],[1,1,2,3,3])).toEqual([1,2,3])});it("should only use strict typing to match",function(){expect(Ext.Array.intersect([1],["1"])).toEqual([])});it("should handle arrays containing falsy values",function(){expect(Ext.Array.intersect([undefined,null,false,0,""],[undefined,null,false,0,""])).toEqual([undefined,null,false,0,""])})});describe("difference",function(){it("should return a set difference of two arrays with items in order of first appearance",function(){expect(Ext.Array.difference([1,2,3,4],[3,2])).toEqual([1,4])});it("should return the first array unchanged if there is no difference",function(){expect(Ext.Array.difference([1,2,3],[4,5,6])).toEqual([1,2,3])});it("should return a new reference",function(){var c=[1,2,3];expect(Ext.Array.difference(c,[3,2])).not.toBe(c)});it("should remove multiples of the same value from the first array",function(){expect(Ext.Array.difference([1,2,3,2,4,1],[2,1])).toEqual([3,4])});it("should only use strict typing to match",function(){expect(Ext.Array.difference([1],["1"])).toEqual([1])})});describe("sort",function(){var d,c;beforeEach(function(){d=["bbb","addda","erere","fff","de3"];c=[1,3,2,4,6,7]});describe("with strings",function(){it("should be able to sort an array without sortFn",function(){Ext.Array.sort(d);expect(d).toEqual(["addda","bbb","de3","erere","fff"])});it("should be able to use a sortFn that returns a Number",function(){Ext.Array.sort(d,function(f,e){if(f===e){return 0}return f>e?1:-1});expect(d).toEqual(["addda","bbb","de3","erere","fff"])})});describe("with numbers",function(){it("should be able to sort an array without sortFn",function(){Ext.Array.sort(c);expect(c).toEqual([1,2,3,4,6,7])});it("should be able to use a sortFn that returns a Number",function(){Ext.Array.sort(c,function(f,e){return f-e});expect(c).toEqual([1,2,3,4,6,7])})})});describe("min",function(){describe("numbers",function(){it("without comparisonFn",function(){expect(Ext.Array.min([1,2,3,4,5,6])).toEqual(1);expect(Ext.Array.min([6,5,4,3,2,1])).toEqual(1)});it("with comparisonFn",function(){expect(Ext.Array.min([1,2,3,4,5,6],function(d,c){return d<c?1:-1})).toEqual(6)})})});describe("max",function(){describe("numbers",function(){it("without comparisonFn",function(){expect(Ext.Array.max([1,2,3,4,5,6])).toEqual(6)});it("with comparisonFn",function(){expect(Ext.Array.max([1,2,3,4,5,6],function(d,c){return d<c?1:-1})).toEqual(1)})})});describe("sum",function(){it("should return 21",function(){expect(Ext.Array.sum([1,2,3,4,5,6])).toEqual(21)})});describe("mean",function(){it("should return 3.5",function(){expect(Ext.Array.mean([1,2,3,4,5,6])).toEqual(3.5)})});function a(c){it("should remove items in the middle",function(){var d=[0,1,2,3,4,5,6,7];c(d,2,2);expect(Ext.encode(d)).toEqual("[0,1,4,5,6,7]")});it("should insert items in the middle",function(){var d=[0,1,2,3,4,5,6,7];c(d,2,0,["a","b"]);expect(Ext.encode(d)).toEqual('[0,1,"a","b",2,3,4,5,6,7]')});it("should replace in the middle with more items",function(){var d=[0,1,2,3,4,5,6,7];c(d,2,2,["a","b","c","d"]);expect(Ext.encode(d)).toEqual('[0,1,"a","b","c","d",4,5,6,7]')});it("should replace in the middle with fewer items",function(){var d=[0,1,2,3,4,5,6,7];c(d,2,4,["a","b"]);expect(Ext.encode(d)).toEqual('[0,1,"a","b",6,7]')});it("should delete at front",function(){var d=[0,1,2,3];c(d,0,2);expect(Ext.encode(d)).toEqual("[2,3]")});it("should delete at tail",function(){var d=[0,1,2,3];c(d,2,2);expect(Ext.encode(d)).toEqual("[0,1]")});it("should delete everything",function(){var d=[0,1,2,3];c(d,0,4);expect(Ext.encode(d)).toEqual("[]")});it("should insert at front",function(){var d=[0,1];c(d,0,0,["a","b","c","d","e"]);expect(Ext.encode(d)).toEqual('["a","b","c","d","e",0,1]')});it("should insert at tail",function(){var d=[0,1];c(d,d.length,0,["a","b","c","d","e"]);expect(Ext.encode(d)).toEqual('[0,1,"a","b","c","d","e"]')});it("should insert into empty array",function(){var d=[];c(d,0,0,["a","b","c","d","e"]);expect(Ext.encode(d)).toEqual('["a","b","c","d","e"]')});it("should replace at front",function(){var d=[0,1];c(d,0,1,["a","b","c","d","e"]);expect(Ext.encode(d)).toEqual('["a","b","c","d","e",1]')});it("should replace at tail",function(){var d=[0,1];c(d,1,1,["a","b","c","d","e"]);expect(Ext.encode(d)).toEqual('[0,"a","b","c","d","e"]')});it("should replace entire array",function(){var d=[0,1,2,3];c(d,0,d.length,["a","b","c","d","e"]);expect(Ext.encode(d)).toEqual('["a","b","c","d","e"]')});it("should handle negative index",function(){var d=[0,1,2,3];c(d,-2,20);expect(Ext.encode(d)).toEqual("[0,1]")});it("should work around the IE8 bug",function(){var f=[],d,e=20;while(e--){f.push("A")}f.splice(15,0,"F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F");d=f.length;c(f,13,0,["XXX"]);expect(f.length).toEqual(d+1)})}describe("replaceSim",function(){a(Ext.Array._replaceSim)});describe("replaceNative",function(){a(Ext.Array.replace)});describe("splice",function(){it("returns proper result array at the front",function(){var c=Ext.Array._spliceSim([1,2,3,4],0,2);expect(Ext.encode(c)).toEqual("[1,2]")});it("returns proper result array at the end",function(){var c=Ext.Array._spliceSim([1,2,3,4],2,2);expect(Ext.encode(c)).toEqual("[3,4]")});it("returns proper result array from the middle",function(){var c=Ext.Array._spliceSim([1,2,3,4],1,2);expect(Ext.encode(c)).toEqual("[2,3]")});it("return an empty array when nothing removed",function(){var c=Ext.Array._spliceSim([1,2,3,4],1,0);expect(Ext.encode(c)).toEqual("[]")})});describe("slice",function(){var d;describe("with Array",function(){beforeEach(function(){d=[{0:0},{1:1},{2:2},{3:3}]});c()});describe("with arguments",function(){beforeEach(function(){d=(function(){return arguments})({0:0},{1:1},{2:2},{3:3})});c()});function c(){it("should shallow clone",function(){var e=Ext.Array.slice(d,0);expect(e===d).toBe(false);expect(e[0]===d[0]).toBe(true)});it("should not require a begin or end",function(){var e=Ext.Array.slice(d);expect(e===d).toBe(false);expect(e[0]).toBe(d[0])});it("should slice off the first item",function(){var e=Ext.Array.slice(d,1);expect(e.length).toBe(3);expect(e[0]).toBe(d[1]);expect(e[2]).toBe(d[3])});it("should ignore `end` if undefined",function(){var e=Ext.Array.slice(d,1,undefined);expect(e.length).toBe(3);expect(e[0]).toBe(d[1]);expect(e[2]).toBe(d[3])});it("should ignore `begin` if undefined",function(){var e=Ext.Array.slice(d,undefined);expect(e.length).toBe(4);expect(e[0]).toBe(d[0]);expect(e[3]).toBe(d[3])});it("should ignore `begin` and `end` if undefined",function(){var e=Ext.Array.slice(d,undefined,undefined);expect(e.length).toBe(4);expect(e[0]).toBe(d[0]);expect(e[3]).toBe(d[3])});it("should slice out the middle",function(){var e=Ext.Array.slice(d,1,-1);expect(e.length).toBe(2);expect(e[0]).toBe(d[1]);expect(e[1]).toBe(d[2])})}});describe("toMap",function(){it("should handle just an array",function(){var c=Ext.Array.toMap(["a","b","c"]);expect(c.a).toEqual(1);expect(c.b).toEqual(2);expect(c.c).toEqual(3);delete c.a;delete c.b;delete c.c;expect(Ext.encode(c)).toEqual("{}")});it("should handle just an array and a property name",function(){var c=Ext.Array.toMap([{name:"aaa"},{name:"bbb"},{name:"ccc"}],"name");expect(c.aaa).toEqual(1);expect(c.bbb).toEqual(2);expect(c.ccc).toEqual(3);delete c.aaa;delete c.bbb;delete c.ccc;expect(Ext.encode(c)).toEqual("{}")});it("should handle just an array and a key extractor",function(){var c=Ext.Array.toMap([{name:"aaa"},{name:"bbb"},{name:"ccc"}],function(d){return d.name.toUpperCase()});expect(c.AAA).toEqual(1);expect(c.BBB).toEqual(2);expect(c.CCC).toEqual(3);delete c.AAA;delete c.BBB;delete c.CCC;expect(Ext.encode(c)).toEqual("{}")})});describe("flatten",function(){var c=Ext.Array.flatten;it("should convert a multi-dimensional array into 1-d array",function(){expect(c([1,[2,3],[4,[5,6]]])).toEqual([1,2,3,4,5,6])})});describe("Ext.Array.push",function(){var c=Ext.Array.push;it("should create an array",function(){expect(c(undefined,1)).toEqual([1])});it("should convert a non-array to an array",function(){expect(c(1,2)).toEqual([1,2])});it("should push single elements onto end",function(){expect(c([1,2],3,4,5)).toEqual([1,2,3,4,5])});it("should push all items of array arguments onto end",function(){expect(c([1,2],[3,4],[5])).toEqual([1,2,3,4,5])});it("should push arrays and single items into the end",function(){expect(c([1,2],[3,4],5)).toEqual([1,2,3,4,5])})})});